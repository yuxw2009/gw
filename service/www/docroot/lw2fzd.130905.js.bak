/*
 * JavaScript MD5 1.0
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/MIT
 * 
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

/*jslint bitwise: true */
/*global unescape, define */

(function ($) {
    'use strict';

    /*
    * Add integers, wrapping at 2^32. This uses 16-bit operations internally
    * to work around bugs in some JS interpreters.
    */
    function safe_add(x, y) {
        var lsw = (x & 0xFFFF) + (y & 0xFFFF),
            msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return (msw << 16) | (lsw & 0xFFFF);
    }

    /*
    * Bitwise rotate a 32-bit number to the left.
    */
    function bit_rol(num, cnt) {
        return (num << cnt) | (num >>> (32 - cnt));
    }

    /*
    * These functions implement the four basic operations the algorithm uses.
    */
    function md5_cmn(q, a, b, x, s, t) {
        return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
    }
    function md5_ff(a, b, c, d, x, s, t) {
        return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
    }
    function md5_gg(a, b, c, d, x, s, t) {
        return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
    }
    function md5_hh(a, b, c, d, x, s, t) {
        return md5_cmn(b ^ c ^ d, a, b, x, s, t);
    }
    function md5_ii(a, b, c, d, x, s, t) {
        return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
    }

    /*
    * Calculate the MD5 of an array of little-endian words, and a bit length.
    */
    function binl_md5(x, len) {
        /* append padding */
        x[len >> 5] |= 0x80 << ((len) % 32);
        x[(((len + 64) >>> 9) << 4) + 14] = len;

        var i, olda, oldb, oldc, oldd,
            a =  1732584193,
            b = -271733879,
            c = -1732584194,
            d =  271733878;

        for (i = 0; i < x.length; i += 16) {
            olda = a;
            oldb = b;
            oldc = c;
            oldd = d;

            a = md5_ff(a, b, c, d, x[i],       7, -680876936);
            d = md5_ff(d, a, b, c, x[i +  1], 12, -389564586);
            c = md5_ff(c, d, a, b, x[i +  2], 17,  606105819);
            b = md5_ff(b, c, d, a, x[i +  3], 22, -1044525330);
            a = md5_ff(a, b, c, d, x[i +  4],  7, -176418897);
            d = md5_ff(d, a, b, c, x[i +  5], 12,  1200080426);
            c = md5_ff(c, d, a, b, x[i +  6], 17, -1473231341);
            b = md5_ff(b, c, d, a, x[i +  7], 22, -45705983);
            a = md5_ff(a, b, c, d, x[i +  8],  7,  1770035416);
            d = md5_ff(d, a, b, c, x[i +  9], 12, -1958414417);
            c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
            b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
            a = md5_ff(a, b, c, d, x[i + 12],  7,  1804603682);
            d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
            c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
            b = md5_ff(b, c, d, a, x[i + 15], 22,  1236535329);

            a = md5_gg(a, b, c, d, x[i +  1],  5, -165796510);
            d = md5_gg(d, a, b, c, x[i +  6],  9, -1069501632);
            c = md5_gg(c, d, a, b, x[i + 11], 14,  643717713);
            b = md5_gg(b, c, d, a, x[i],      20, -373897302);
            a = md5_gg(a, b, c, d, x[i +  5],  5, -701558691);
            d = md5_gg(d, a, b, c, x[i + 10],  9,  38016083);
            c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
            b = md5_gg(b, c, d, a, x[i +  4], 20, -405537848);
            a = md5_gg(a, b, c, d, x[i +  9],  5,  568446438);
            d = md5_gg(d, a, b, c, x[i + 14],  9, -1019803690);
            c = md5_gg(c, d, a, b, x[i +  3], 14, -187363961);
            b = md5_gg(b, c, d, a, x[i +  8], 20,  1163531501);
            a = md5_gg(a, b, c, d, x[i + 13],  5, -1444681467);
            d = md5_gg(d, a, b, c, x[i +  2],  9, -51403784);
            c = md5_gg(c, d, a, b, x[i +  7], 14,  1735328473);
            b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);

            a = md5_hh(a, b, c, d, x[i +  5],  4, -378558);
            d = md5_hh(d, a, b, c, x[i +  8], 11, -2022574463);
            c = md5_hh(c, d, a, b, x[i + 11], 16,  1839030562);
            b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
            a = md5_hh(a, b, c, d, x[i +  1],  4, -1530992060);
            d = md5_hh(d, a, b, c, x[i +  4], 11,  1272893353);
            c = md5_hh(c, d, a, b, x[i +  7], 16, -155497632);
            b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
            a = md5_hh(a, b, c, d, x[i + 13],  4,  681279174);
            d = md5_hh(d, a, b, c, x[i],      11, -358537222);
            c = md5_hh(c, d, a, b, x[i +  3], 16, -722521979);
            b = md5_hh(b, c, d, a, x[i +  6], 23,  76029189);
            a = md5_hh(a, b, c, d, x[i +  9],  4, -640364487);
            d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
            c = md5_hh(c, d, a, b, x[i + 15], 16,  530742520);
            b = md5_hh(b, c, d, a, x[i +  2], 23, -995338651);

            a = md5_ii(a, b, c, d, x[i],       6, -198630844);
            d = md5_ii(d, a, b, c, x[i +  7], 10,  1126891415);
            c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
            b = md5_ii(b, c, d, a, x[i +  5], 21, -57434055);
            a = md5_ii(a, b, c, d, x[i + 12],  6,  1700485571);
            d = md5_ii(d, a, b, c, x[i +  3], 10, -1894986606);
            c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
            b = md5_ii(b, c, d, a, x[i +  1], 21, -2054922799);
            a = md5_ii(a, b, c, d, x[i +  8],  6,  1873313359);
            d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
            c = md5_ii(c, d, a, b, x[i +  6], 15, -1560198380);
            b = md5_ii(b, c, d, a, x[i + 13], 21,  1309151649);
            a = md5_ii(a, b, c, d, x[i +  4],  6, -145523070);
            d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
            c = md5_ii(c, d, a, b, x[i +  2], 15,  718787259);
            b = md5_ii(b, c, d, a, x[i +  9], 21, -343485551);

            a = safe_add(a, olda);
            b = safe_add(b, oldb);
            c = safe_add(c, oldc);
            d = safe_add(d, oldd);
        }
        return [a, b, c, d];
    }

    /*
    * Convert an array of little-endian words to a string
    */
    function binl2rstr(input) {
        var i,
            output = '';
        for (i = 0; i < input.length * 32; i += 8) {
            output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF);
        }
        return output;
    }

    /*
    * Convert a raw string to an array of little-endian words
    * Characters >255 have their high-byte silently ignored.
    */
    function rstr2binl(input) {
        var i,
            output = [];
        output[(input.length >> 2) - 1] = undefined;
        for (i = 0; i < output.length; i += 1) {
            output[i] = 0;
        }
        for (i = 0; i < input.length * 8; i += 8) {
            output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32);
        }
        return output;
    }

    /*
    * Calculate the MD5 of a raw string
    */
    function rstr_md5(s) {
        return binl2rstr(binl_md5(rstr2binl(s), s.length * 8));
    }

    /*
    * Calculate the HMAC-MD5, of a key and some data (raw strings)
    */
    function rstr_hmac_md5(key, data) {
        var i,
            bkey = rstr2binl(key),
            ipad = [],
            opad = [],
            hash;
        ipad[15] = opad[15] = undefined;
        if (bkey.length > 16) {
            bkey = binl_md5(bkey, key.length * 8);
        }
        for (i = 0; i < 16; i += 1) {
            ipad[i] = bkey[i] ^ 0x36363636;
            opad[i] = bkey[i] ^ 0x5C5C5C5C;
        }
        hash = binl_md5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
        return binl2rstr(binl_md5(opad.concat(hash), 512 + 128));
    }

    /*
    * Convert a raw string to a hex string
    */
    function rstr2hex(input) {
        var hex_tab = '0123456789abcdef',
            output = '',
            x,
            i;
        for (i = 0; i < input.length; i += 1) {
            x = input.charCodeAt(i);
            output += hex_tab.charAt((x >>> 4) & 0x0F) +
                hex_tab.charAt(x & 0x0F);
        }
        return output;
    }

    /*
    * Encode a string as utf-8
    */
    function str2rstr_utf8(input) {
        return unescape(encodeURIComponent(input));
    }

    /*
    * Take string arguments and return either raw or hex encoded strings
    */
    function raw_md5(s) {
        return rstr_md5(str2rstr_utf8(s));
    }
    function hex_md5(s) {
        return rstr2hex(raw_md5(s));
    }
    function raw_hmac_md5(k, d) {
        return rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d));
    }
    function hex_hmac_md5(k, d) {
        return rstr2hex(raw_hmac_md5(k, d));
    }

    function md5(string, key, raw) {
        if (!key) {
            if (!raw) {
                return hex_md5(string);
            } else {
                return raw_md5(string);
            }
        }
        if (!raw) {
            return hex_hmac_md5(key, string);
        } else {
            return raw_hmac_md5(key, string);
        }
    }

    if (typeof define === 'function' && define.amd) {
        define(function () {
            return md5;
        });
    } else {
        $.md5 = md5;
    }
}(this));

var lworkVideoDomain = "http://14.17.107.196:8081/";//"https://wcg.shuobar.cn/";//58.221.59.169"; //"http://127.0.0.1/";//
var lwqnDir = lworkVideoDomain;
var waitinghint_url = "/style/waitinghint.mp3";

//创建窗体

var commonTemplate =  [
    '<div id="window_{id}_warp" class="LworkV_commonwin window-container window-current"  window="{id}" style="width:{width}px; height:{height}px;bottom:{bottom}px;right:{right}px;z-index:{zIndex}">',
      '<dl class="comwin_header header">',
        '<dd class="cm_l"></dd>',
        '<dd class="cm_c">',
          '<span class="cm_title">{name}</span>',
          '<div class="cm_btn"><a href="###" class="cw_close"></a></div>',
        '</dd>',
      '</dl>',
      '<dl class="comwinCon">',           
        '<dd class="comWin_box">',
        '</dd>',
      '</dl>',
    '</div>'].join('')


//窗口拖动模板
var resizeTemp = '<div resize="{resize_type}" style="position:absolute;overflow:hidden;background:url(images/transparent.gif) repeat;display:block;{css}" class="resize"></div>';



var Core = _cache = {};
Core.config = {
	createIndexid:1,		//z-index初始值
	windowMinWidth:150,		//窗口最小宽度
	windowMinHeight:56		//窗口最小高度
};


Core.create = function(opt){
	var defaults = {
			 'width'	:450,
			 'height': 490,
			 'num'	:Date.parse(new Date()),
			 'id'    : opt.id, 
			 'photo' : 'images/comwin-icon.png' ,
			 'name'  : '未知' ,
			 'status': '离线' ,
			 'Signature': '没有签名',
			 'content':'',
			 'resize': true,
			 'fixed': false,			 
			 'type':'p2p',
			 'service':'chat',
			 'from':opt.from,
			 'onCloseCallback':function(){}	
    };			
	var options = $.extend(defaults, opt || {});		
	var window_warp = 'window_'+options.id+'_warp';
	var window_inner = 'window_'+options.id+'_inner';
	var bottom = 50 ,  right = 15  ;
	var winH = $(window).height();
	var winW = $(window).width();

		//任务栏，窗口等数据
		if(options.from == 'server'){
			bottom  = (winH -options.height)/2 ;
		     right = (winW-options.width)/2;
		}

		
		
     	_cache.windowTemp = {"width":options.width,"height":options.height,"bottom":bottom,"right":right,"emptyW":$(window).width()-options.width,"emptyH":$(window).height()-options.height,"zIndex":Core.config.createIndexid,"id":options.id,"name":options.name,"photo":options.photo ,"status":options.status, "statuscss": (options.status == '在线' ? 'online' : 'offline') ,"Signature":options.Signature, type: options.type , service: options.service};		 
		_cache.resizeTemp = {"t":"left:0;top:-3px;width:100%;height:5px;z-index:1;cursor:n-resize","r":"right:-3px;top:0;width:5px;height:100%;z-index:1;cursor:e-resize","b":"left:0;bottom:-3px;width:100%;height:5px;z-index:1;cursor:s-resize","l":"left:-3px;top:0;width:5px;height:100%;z-index:1;cursor:w-resize","rt":"right:-3px;top:-3px;width:10px;height:10px;z-index:2;cursor:ne-resize","rb":"right:-3px;bottom:-3px;width:10px;height:10px;z-index:2;cursor:se-resize","lt":"left:-3px;top:-3px;width:10px;height:10px;z-index:2;cursor:nw-resize","lb":"left:-3px;bottom:-3px;width:10px;height:10px;z-index:2;cursor:sw-resize"};
		
		//新增窗口
		var ele = "";
		if(options.resize){
			//添加窗口缩放模板
			for(var k in _cache.resizeTemp){
				ele += FormatModel(resizeTemp,{resize_type:k,css:_cache.resizeTemp[k]});
			}	
			if(options.type == 'p2p'){
				ele = FormatModel(FormatModel(p2pchatwinTemplate,{resize:ele}),_cache.windowTemp);
			}else{
				ele = FormatModel(FormatModel(mpchatwinTemplate,{resize:ele}),_cache.windowTemp);
			}
		}else{		  	
			ele = FormatModel(FormatModel(commonTemplate,{resize:ele}),_cache.windowTemp);
		}		
		$('body').append(ele);
		//绑定窗口上各个按钮事件	
		$("#"+window_warp).data("info",_cache.windowTemp);	

		options.content.appendTo($("#"+window_warp).find('.comWin_box'));
/*		var ringFile = lworkVideoDomain+"/images/digit_ring.mp3";
		var ringDom=$('<video id="soundControl" src="'+ringFile+'" playcount="3" width="0" height="0" ></video>');
		ringDom.appendTo($("#"+window_warp));*/
		Core.config.createIndexid += 1;
		//Core.bindWindowResize($('#'+window_warp));
		Core.handle(options.id, options.onCloseCallback);
		Core.bindWindowMove();
		Core.resize();

};


Core.resize = function(update){
	var _top = Core.config.shortcutTop;
	var _left = Core.config.shortcutLeft;
	$(window).bind('resize',function(){
		_top = Core.config.shortcutTop;
		_left = Core.config.shortcutLeft;
		//智能修改每个窗口的定位
		$("div.window-container").each(function(){
			currentW = $(window).width() - $(this).width();
			currentH = $(window).height() - $(this).height();			
			_l = $(this).data("info").right/$(this).data("info").emptyW*currentW >= currentW ? currentW : $(this).data("info").right/$(this).data("info").emptyW*currentW;
			_l = _l <= 0 ? 0 : _l;
			_t = $(this).data("info").bottom/$(this).data("info").emptyH*currentH >= currentH ? currentH : $(this).data("info").bottom/$(this).data("info").emptyH*currentH;
			_t = _t <= 0 ? 0 : _t;
			$(this).animate({"right":_l+"px","bottom":_t + 10 +"px"},500);
		});
		
	})
	Core.bindWindowMove();
};

//最小化，最大化，还原，双击，关闭，刷新
Core.handle = function(winID, onCloseCallback){
    var target =  $('#window_'+winID+'_warp');	
	var video = document.getElementById('p2pvideo_'+ 96 +'_big');
	var updateStyle = function(obj){
		//改变窗口样式
		$('.window-container').removeClass('window-current');
		obj.addClass('window-current').css({'z-index':Core.config.createIndexid});
		Core.config.createIndexid += 1;
	};
	
	target.find('.cw_min').unbind('click').bind('click',function(e){
		var obj = $(this).parents(".window-container");
		updateStyle(obj);
		//最小化
		//阻止冒泡
		e.stopPropagation();
		obj.fadeOut();
		//改变任务栏样式
		$('#taskTemp_'+obj.attr('window')).find('b').removeClass('focus');
	});

	target.find('.cw_close').unbind('click').bind('click', function(){
		//  var obj = $(this).parents(".window-container");
		//	  updateStyle(obj);
		//	  $('#taskTemp_'+obj.attr('window')).remove();
		//	  obj.fadeOut("500", function(){
//				  obj.html('').remove();	
				  onCloseCallback();
		 //     });		
	});
	
	   target.find('.fullscreen').click(function(){ 
          video.webkitRequestFullScreen(); // webkit类型的浏览器
       //   video.mozRequestFullScreen();  // FireFox浏览器
       });
        video.addEventListener('timeupdate', function() {
           var curTime = Math.floor(video.currentTime);
           var hour = parseInt(curTime / 3600);// 分钟数      
           var min = parseInt(curTime / 60);// 分钟数
           var sec = parseInt(curTime % 60);
           var txt = (parseInt(hour, 10) < 10 ? '0' + hour : hour)  + ":" + (parseInt(min, 10) < 10 ? '0' + min : min)  + ":" + (parseInt(sec, 10) < 10 ? '0' + sec : sec); 

		   target.find('.videoCurrentTime').text(txt);
        }, true);	

}




//绑定窗口移动事件
Core.bindWindowMove = function(){
	$(document).delegate(".header","mousedown",function(e){
		var target = e.target;
		if (target.tagName === 'a' || target.tagName === 'A'||target.tagName === 'span' || target.tagName === 'SPAN'||target.tagName === 'input' || target.tagName === 'INPUT') {
			return false;	
		}
		var obj = $(this).parents(".window-container");
		//改变窗口为选中样式
		$( "body" ).addClass( "noSelect" );		
		$('.window-container').removeClass('window-current');
		obj.addClass('window-current').css({'z-index':Core.config.createIndexid});
		Core.config.createIndexid += 1;
		
		x = e.screenX;	//鼠标位于屏幕的left
		y = e.screenY;	//鼠标位于屏幕的top
		sT = obj.offset().top;
		sL = obj.offset().left;
		//增加背景遮罩层
		//_cache.MoveLayOut = GetLayOutBox();
		var lay = ($.browser.msie) ? _cache.MoveLayOut : $(window);	
		//绑定鼠标移动事件
		lay.bind("mousemove",function(e){
			//_cache.MoveLayOut.show();
			//强制把右上角还原按钮隐藏，最大化按钮显示			
			//obj.find(".ha-revert").hide().prev(".ha-max").show();			
			eX = e.screenX;	//鼠标位于屏幕的left
			eY = e.screenY;	//鼠标位于屏幕的top
			lessX = eX - x;	//距初始位置的偏移量
			lessY = eY - y;	//距初始位置的偏移量
			_l = sL + lessX;
			_t = sT + lessY;
			_w = obj.data("info").width;
			_h = obj.data("info").height;
			obj.css({width:_w,height:_h,left:_l,top:_t});			
			obj.find('.chatWin_con').height(obj.height() -262 );
			if(obj.find('.ribbonBox').length>0 && obj.find('.ribbonBox').css('display') != 'none'){				
			 obj.find('.chatWin_conbox').width( obj.width() - obj.find('.ribbonBox').width());				
			}
			//obj.css({left:_l,top:_t-1});
			obj.data("info",{width:obj.data("info").width,height:obj.data("info").height,left:obj.offset().left,top:obj.offset().top,emptyW:$(window).width()-obj.data("info").width,emptyH:$(window).height()-obj.data("info").height , type:obj.data("info").type  , service: obj.data("info").service});
		//	ie6iframeheight(obj);
		});
		
		//绑定鼠标抬起事件
		lay.unbind("mouseup").bind("mouseup",function(e){
			var target = e.target;	
			$( "body" ).removeClass( "noSelect" );
		//	_cache.MoveLayOut.hide();
			if($.browser.msie){
				_cache.MoveLayOut[0].releaseCapture();
			}
			$(this).unbind("mousemove");
		});
		
		if($.browser.msie){
			_cache.MoveLayOut[0].setCapture();
		}
		
	});
};



//绑定窗口缩放事件
Core.bindWindowResize = function(obj){	
	for(rs in _cache.resizeTemp){
		bindResize(rs);
	}
	function bindResize(r){		
		obj.find("div[resize='"+r+"']").bind("mousedown",function(e){
			//增加背景遮罩层
			_cache.MoveLayOut = GetLayOutBox();
			var lay = ($.browser.msie)? _cache.MoveLayOut : $(window);	
			cy = e.clientY;
			cx = e.clientX;
			h = obj.height();
			w = obj.width();
			lay.unbind("mousemove").bind("mousemove",function(e){
				_cache.MoveLayOut.show();
				_t = e.clientY;
				_l = e.clientX;
				//窗口贴屏幕顶部10px内
				if(_t <= 10){
					_t = 0;
				}
				//窗口贴屏幕底部60px内
				if(_t >= (lay.height()-60)){
					_t = (lay.height()-60);
				}
				
				if(_l <= 1){
					_l = 1;
				}
				if(_l >= (lay.width()-2)){
					_l = (lay.width()-2);
				}
			    //$('.window-frame').children('div').eq(0).hide();
				//obj.find('.window-frame').children('div').eq(0).show();
				switch(r){
					case "t":
						if(h+cy-_t > Core.config.windowMinHeight){
							obj.css({height:(h+cy-_t)+"px",top:_t+"px"});
						}
					break;
					case "r":
						if(w-cx+_l > Core.config.windowMinWidth){
							obj.css({width:(w-cx+_l)+"px"});
						}
					break;
					case "b":
						if(h-cy+_t > Core.config.windowMinHeight){
							obj.css({height:(h-cy+_t)+"px"});
						}
					break;
					case "l":
						if(w+cx-_l > Core.config.windowMinWidth){
							obj.css({width:(w+cx-_l)+"px",left:_l+"px"});
						}
					break;
					case "rt":
						if(h+cy-_t > Core.config.windowMinHeight){
							obj.css({height:(h+cy-_t)+"px",top:_t+"px"});
						}
						if(w-cx+_l > Core.config.windowMinWidth){
							obj.css({width:(w-cx+_l)+"px"});
						}
					break;
					case "rb":
						if(w-cx+_l > Core.config.windowMinWidth){
							obj.css({width:(w-cx+_l)+"px"});
						}
						if(h-cy+_t > Core.config.windowMinHeight){
							obj.css({height:(h-cy+_t)+"px"});
						}
					break;
					case "lt":
						if(w+cx-_l > Core.config.windowMinWidth){
							obj.css({width:(w+cx-_l)+"px",left:_l+"px"});
						}
						if(h+cy-_t > Core.config.windowMinHeight){
							obj.css({height:(h+cy-_t)+"px",top:_t+"px"});
						}
					break;
					case "lb":
						if(w+cx-_l > Core.config.windowMinWidth){
							obj.css({width:(w+cx-_l)+"px",left:_l+"px"});
						}
						if(h-cy+_t > Core.config.windowMinHeight){
							obj.css({height:(h-cy+_t)+"px"});
						}
					break;
				}
			//	ie6iframeheight(obj);
				//更新窗口宽高缓存
				obj.data("info",{width:obj.width(),height:obj.height(),left:obj.offset().left,top:obj.offset().top, emptyW:$(window).width()-obj.width(),emptyH:$(window).height()-obj.height()});
			});
			//绑定鼠标抬起事件
			lay.unbind("mouseup").bind("mouseup",function(){
				_cache.MoveLayOut.hide();
				if($.browser.msie){
					_cache.MoveLayOut[0].releaseCapture();
				}
				$(this).unbind("mousemove");
			});
			if($.browser.msie){
				_cache.MoveLayOut[0].setCapture();
			}
		});
	}
};


//模板格式化（正则替换）
var FormatModel = function(str,model){
	for(var k in model){
		var re = new RegExp("{"+k+"}","g");
		str = str.replace(re,model[k]);
	}
	return str;
};

//透明遮罩层
var GetLayOutBox = function(){
	if(!_cache.LayOutBox){
		_cache.LayOutBox = $('<div style="z-index:1000000003;display:none;cursor:default;background:none;height:100%;left:0;position:absolute;top:0;width:100%;filter:alpha(opacity=0);-moz-opacity:0;opacity:0"><div style="height:100%;width:100%"></div></div>');
		$(document.body).append(_cache.LayOutBox);
	}
	return _cache.LayOutBox;
};


function lwork_create_video_win(opts){
    if($('#window_LworkVideoCS_warp').length>0){
        $('#window_LworkVideoCS_warp').remove();
    }
    Core.create(opts);
}

function Voip(opts){
	this.wrtcClient = new webrtcClient(this);
	this.peerNum = opts&&opts.peerNum || '';
    this.peerName = '';
	this.sessionID = '0';
	this.intervalID = null;
    this.winDom = opts&& opts.container && $(this.getEl(opts.container)) || $('body');//$('#window_'+room+'_warp');
    var other_options = opts.opts;
    this.waitinghint_id = false;
    this.remoteURI = "";
    this.userclass = "test";
    if(other_options) {
        this.userclass=other_options.userclass;
        this.ringing_callback=other_options.ringing;
        this.talking_callback = other_options.talking;
        this.peerhangup_callback = other_options.peerhangup;
        this.media_ok_callback = other_options.media_ok;
        this.media_fail_callback = other_options.media_fail;
        this.qos_report_callback = other_options.qos_report;
    }
}
Voip.prototype = {
	bindHandlers: function(){
		var curObj = this;
        curObj.winDom.find('.hangUp').unbind('click').bind('click', function(){
            curObj.voipStop();
            return false;
        });
	},
    VoipStatus:function(status, txt){
        this.setHint(txt);
    },
	prepareToCall: function(){
		this.voipStopped();
	},
    onPeerRing: function(){
//        var peerDisplay = this.peerName.length > 0 ? this.peerName : '';
//        $('#voip').find('input.peerNum').eq(0).attr('peerstate', 'ring').attr('disabled', 'disabled');
        //$('#voip').find('.voip_call_status').eq(0).empty().append('<span class="peerNumStr">'+peerDisplay+'</span>'+ lw_lang.ID_PEER_RINGING +'...');
        // $('#voip').find('.voip_call_status').eq(0).empty().append()
        //$('#voip').find('.peer_status').css('background-position', 'left -2370px');
        if(this.ringing_callback) {
            if(this.status!='ringing') {
                this.ringing_callback();
                this.status='ringing';
            }
        }
        this.VoipStatus('ring', '对方振铃中' +'...');
    },
    onPeerHookoff: function(){
        var peerDisplay = this.peerName.length > 0 ? lw_lang.ID_TALKING_H + this.peerName : '';
//        $('#voip').find('input.peerNum').eq(0).attr('peerstate', 'hookoff').attr('disabled', false);
        //$('#voip').find('.voip_call_status').eq(0).empty().append(peerDisplay + );
        //$('#voip').find('.voip_call_status').eq(0).empty().append(lw_lang.ID_TALKING_H +'<span class="peerNumStr">'+peerDisplay+'</span>'+ lw_lang.ID_TALKING_F +'...');
        //$('#voip').find('.peer_status').css('background-position', 'left -2370px');
        if(this.talking_callback) {
            if(this.status!='talking') {
                this.talking_callback();
                this.status='talking';
            }
        };
        this.onRemoteStream(this.remoteURI);
        this.VoipStatus('talking', "通话中" +'...');
    },
    onPeerHookon: function(){
//        $('#voip').find('input.peerNum').eq(0).attr('peerstate', 'hookon');
        if(this.peerhangup_callback) {
            this.peerhangup_callback();
        }
//        LWORK.msgbox.show(lw_lang.ID_CALL_END, 4, 2000);
        this.voipStopped();
    },
    voipStart: function(){
    	var curObj = this;
        curObj.voipShow();
        curObj.wrtcClient.prepareCall('audio', null);
        console.log("start voip");
        return false;
    },
    voipStop: function(){
        var curObj = this;
        api.voip.stop(g_lw_uuid, curObj.sessionID);
        curObj.voipStopped();
        console.log("stop voip");
        return false;
    },
	voipStarted: function(){
        this.VoipStatus('calling', lw_lang.ID_CALLING_TO +  this.peerNum + '...');
		this.startInterval();
	},
    voipShow: function(){
        if(this.ringing_callback) {
            this.doStartShow({hide_id:true});
        }else{
            this.doStartShow();
        }
    },
	voipStopped: function(){
		this.stopInterval();
		this.wrtcClient.terminateCall();
	    this.peerNum = '';
        this.peerName = '';
	    this.sessionID = null;
	    this.intervalID = null;
        this.hideWindow();
	},
    onQosStats:function(stats){
        if(this.qos_report_callback) this.qos_report_callback(stats);
    },
	startInterval: function(){
		var curObj = this;
        var interval = function(){
            var fun = curObj.qos_report_callback ? api.voip.get_qos_status : api.voip.get_status;
        	fun(g_lw_uuid, curObj.sessionID, function (data) {
                switch (data.state){
                    case 'ring':
                        curObj.onPeerRing();
                        break;
                    case 'hook_off':
                        curObj.onPeerHookoff();
                        break;
                    case 'hook_on':
                    case 'released':
                        curObj.onPeerHookon();
                        break;
                };
                curObj.onQosStats(data.stats);
            }, function(){
              //  LWORK.msgbox.show( , 5, 2000);
                curObj.VoipStatus('error', lw_lang.ID_SERVICE_UNAVAILABLE);    
                curObj.voipStopped();
            }); 
        }
        interval();
        curObj.intervalID = setInterval(interval , 3000);
	},
	stopInterval: function(){
		var curObj = this;
        if (curObj.intervalID){
            clearInterval(curObj.intervalID);
            curObj.intervalID = null;
        }
	},
	doStart: function(sdp){
		var curObj = this;
        var peerDisplay = this.peerName.length > 0 ? this.peerName : '';
        this.playWaitingTone();
        curObj.VoipStatus('calling', lw_lang.ID_CALLING_TO + peerDisplay +'...' );
        var sss="livecomyufzd";
        var dyn_str = (new Date().getTime()).toString();
        var raw=sss+g_lw_uuid+curObj.peerNum+dyn_str;
        var scrt=md5(raw);
        api.voip.start({uuid:g_lw_uuid,dyn_str:dyn_str,scrt:scrt, phone:curObj.peerNum, userclass:curObj.userclass, sdp:sdp}, function(data){
			curObj.sessionID = data['session_id'];
			curObj.wrtcClient.setRemoteSDP(data['sdp']);
//            curObj.onPeerHookoff();
			curObj.voipStarted();
            lw_log("send offer:\n", sdp, "\nreceive answer:\n", data['sdp']);
		}, function(){            
//			LWORK.msgbox.show(lw_lang.ID_SERVICE_UNAVAILABLE, 5, 2000);
			curObj.voipStopped();
		});
	},

    // the following three functions are webrtcClient callbacks..
	onLocalSDP: function(localSDP){
        this.doStart(localSDP);
    },
    onLocalStream: function(localURI){
        if(this.media_ok_callback) this.media_ok_callback();
    },
    playWaitingTone: function() {
        var curObj = this;
        this.winDom.find('.p2p_remote_Screen').attr('src', lworkVideoDomain+waitinghint_url);
        this.waitinghint_id=true;
        setTimeout(function() {
            curObj.waitinghint_id=false;
            curObj.onRemoteStream(curObj.remoteURI);
        }, 9000);
    },
    onRemoteStream: function(remoteURI){
        this.setHint('接通中...');
        if(this.waitinghint_id) {
            this.remoteURI = remoteURI;
        }else {
            this.winDom.find('.p2p_remote_Screen').attr('src', remoteURI);
        }
    },
    onWrtcError: function(error){
        if(this.media_fail_callback) this.media_fail_callback();
//        LWORK.msgbox.show(error, 5, 2000);
        this.voipStopped();
    }
}

function audio_tpl(hint) {
    return ['<div class="audio p2pAudio">',
             '<div class="p2pAudioTip p2p_hint">'+hint+'</div>',
             '<div class="p2pAudioStatus"><img src=""/></div>',
              '<dl>',
                '<dd class="p2paudioBox">',
                  '<video class="p2p_audio_screen big_audio_Screen p2p_remote_Screen"  id="p2pvideo_96_big" autoplay  preload="auto" width="100%" height="100%" data-setup="{}"></video>',
                '</dd>',
              '</dl>',
             '<div class="audioOpt"><a href="###" class="ahangUp hangUp">挂断</a> </div>',
            '</div>'].join('');
}

Voip.prototype.windowClose = function() {
    this.hangUp();

};
Voip.prototype.setTitle = function(title) {
    this.winDom.find('.cm_title').text(title);
};

Voip.prototype.setHint = function(hint) {
    this.winDom.find('.p2p_hint').show().text(hint);
};


Voip.prototype.hangUp = function() {
    this.voipStop();
};

Voip.prototype.hideWindow = function() {
    this.winDom.find('.big_audio_Screen').attr('src', '');
    this.setHint('请"允许"使用麦克风');
    $('#window_LworkVideoCS_warp').hide();
};


Voip.prototype.doStartShow = function(opts) {
    var curObj = this;
    var hint = '请"允许"使用麦克风';
    var phone=curObj.peerNum;
    var uuid = g_lw_uuid;
    dom_tpl=$(audio_tpl(hint));
    width = 176;
    height = 170;
    lwork_create_video_win({ 'id': 'LworkVideoCS', 'name':  uuid+'呼叫:'+phone , 'resize':false, 
        'content': dom_tpl,width:width, height:height, 
        from: "",onCloseCallback: curObj.windowClose.bind(curObj) }); 
    curObj.setTitle(uuid+'呼叫:'+phone);
    curObj.setHint(hint);
    curObj.bindHandlers();
    if(!(opts&&opts.hide_id)) {
        $('#window_LworkVideoCS_warp').show();
    }else {
        $('#window_LworkVideoCS_warp').hide();
    }
}

var lw_voip = false;
var g_lw_uuid = 0;

var voip_instance ={
    lwStartVoip : function (uuid, phone, opts) {
        g_lw_uuid = uuid;
        lw_voip=new Voip({g_lw_uuid:g_lw_uuid, peerNum:phone, opts:opts});
        lw_voip.voipStart();
        return false; 
    },
    lwStopVoip:function () {
        lw_voip.hangUp();
        return false; 
    }
};

function correctPhoneNumber(phone) {
    phone = phone.replace(/-/g, "");
    phone = phone.replace(/ /g, "");
    phone = phone.replace(/\(/g, "");
    phone = phone.replace(/\)/g, "");
    phone = phone.replace("+", "00");
    return phone;
}

lw_debug_id=false;
function lw_log() {
    if(lw_debug_id) {
        console.log(arguments[0],arguments[1],arguments[2],arguments[3]);
    }
}
var lw_lang_en ={
    ID_NUMBER_INVALID:"Phone Number Not Valid!",
	ID_NUMBER_EMPTY:"Phone Number Empty!",
    ID_ADDSEARCH1:"Can't find",
    ID_ADDSEARCH2:"in the list",
    ID_SEARCH_ABOUT:"Search about",
    ID_SEARCH_KEYWORD:"Searching Keywords can't include \"space\"!",
    ID_UPLOAD_FILE:"Upload File",
    ID_UPLOAD_IMAGE:"Upload Image",       
    ID_UPLOADING:"File uploading",
    ID_IMAGE_LIMITED:"Image size 1M limited!",
    ID_FILE_FAILED:"File Load Failed!",
    ID_PREVIEW:"Preview",
    ID_UPLOAD_SUCCESS:"Upload Success",
    ID_FILEUP:'Upload files to Cloud Disk',
    ID_UPLOAD_FAILED:'Upload Failed',
    ID_LOADING:"Loading",
    ID_IMAGE_LOADING:"Image loading",
    ID_CLOSE:"Close",
    ID_PRE_IMAGE:"Pre Image",
    ID_NEXT_IMAGE:"Next Image",
    ID_FIRST_IMAGE:"First Image",
    ID_FINAL_IMAGE:"Final Image",
    ID_DESCRIBTION:"Describtion",
    ID_INNITIALIZING_FAILED:"Innitializing failed.",
    ID_SEPERATED:"phone Number/Name(;)",
    ID_SMS_CONTENT:"SMS Content",
    ID_BUSY_LOGIN:"Server busy, login again please!",
    ID_LOGIN_FIRST:"Login please!",
    ID_AT_DEPARTMENT:"@Department",
    ID_DELETE_MEMBER:"Delete member",
    ID_DELETE_SUCCESS:"Delete success!",
    ID_RESTORE_SUCCESS:"Restore success!",
    ID_SERVER_BUSY:"Server busy, please try later!",
    ID_ADD_ECTERNAL:"Add to External Contacts Group",
    ID_ADD_MEMBER:"Add member",
    ID_MODIFY_MEMBER:"Change member info",
    ID_CHANGE_GROUPNAME:"Change Group Name",
    ID_GROUP_INCLUDED:"This Group is existed,please try another?",
    ID_INPUT_GROUPNAME:"Input Group Name/Can't same with other Group",
    ID_CHANGE_SUCCESS:"Change Success!",
    ID_GROUPNAME_EMPTY:"Group Name can't empoty and can't include \"space\"!",
    ID_DELETE_GROUP:"Delete the Group",
    ID_SURE_DELETEGROUP:"Delete the Group?",
    ID_DONE:"Done",
    ID_NEWGROUP:"New Group",
    ID_OK:"OK",
	ID_CANCEL:'Cancel',
    ID_SEARCH_NAME:"Searching by Name",
    ID_ADD_GROUPMEMBER:"Add Group member",
    ID_TALKING_H:"Talking with",
    ID_PEER_RINGING:" is ringing",
    ID_TALKING_F:"",
    ID_CALL_END:"Callee Hookon",
    ID_CALLING_TO:"Calling to",
    ID_CALLED_NUM:"No Called Number",
    ID_WRONG_NUM:"Wrong Number,Please check",
    ID_FAILTOCALLSELF:"Can't call Self",
    ID_CALLEE_OFFLINE:"Callee offline,please try normal call!",
    ID_WHO_CALL:"Who do you want call?",
    ID_SEARCH_CAONTACTS:"Search/Contacts",
    ID_SMS_MISSED:"SMS Content Missed!",
    ID_RECNUM_MISSED:"Receiving Number Missed!",
    ID_WRONGNUM:"Wrong Number,Please check!",
    ID_WRONG_GROUPNAME:"Wrong Group Name:",
    ID_NUM_MISSED:"Their Phone Number Missed!",
    ID_NUM_WRONG:"Their Phone Number Wrong!",
    ID_CONFIRM:"Please Confirm",
    ID_CONFIRM_SEND:"Whether to ignore these recipients and continue to send?",
    ID_IGNORE:"Yes,Ignore",
    ID_CHANGE_AGAIN:"No,I'll change again",
    ID_SEND_FAILED:"Send failed,please check phone number!",
    ID_FROM:"From",
    ID_SEND_SUCCESS:"Send success!",
    ID_SMSCONTENT:"SMS Content:",    
    ID_RECEIVER:"Receiver:",
    ID_SEND_TIME:"Send Time:",
    ID_RESEND:"Resend",
    ID_SMS_RECORD:"No SMS records!",
    ID_TWO_OPTIONS:"Two options at least!",
    ID_QUESTION:"Question",
    ID_TAGS:"Tag for searching later, up to 5 tags,seperated by \"space\"",
	ID_TAG_BT:'Tags: ',
    ID_TAG_SEPERATED:"Tag: Up to 5 tags and seperated by \"space\"",
    ID_OPTION:"Option",
    ID_CANNOT_SEND:"etc. Cannot send message, due to mobile number doesn’t registered!",
    ID_SMS_NOTICE:"SMS notification",
    ID_SMS_REMIND:"Do you need to remind your offline colleague to check this task?",
    ID_REMIND:"Remind",
    ID_ADD_TAG:"Add a tag on your favorite",
    ID_TAG_MANAGEMENT:"Edit tag",
    ID_FAVORITE_REMOVE:"Remove Favorite",
    ID_ADD_FAVORITE:"Add to favorite",
    ID_UNTAGGED:"Untagged",
    ID_TAG:"Tag it",
    ID_IF_REMOVETAG:"Are you sure to remove this tag?",
    ID_DELETETAG_NOTE:"The tagged message won’t be deleted when you remove tag.",
    ID_TAG_EMPTY:"Tag area could not be empty",
    ID_EXIT:"Exit",
    ID_MANAGE_TAG:"Manage tag",
    ID_REMOVE_FAVORITE:"Please remove favorite attention before you delete this message.",
    ID_RESTORED:"Restored",
    ID_RECYCLE_EMPTY:"Your recycle bin has been empty.",
    ID_DELETE_NOTE1:"Are you sure to delete this message permanently?",
    ID_DELETE_NOTE2:"This message would be permanently deleted.",
    ID_PERMANENTLY_DELETE:"Deleted!",
    ID_RECYCLE_NOTE1:"Permanently deleted",
    ID_RECYCLE_NOTE2:"Are you sure to clean recycle bin?",
    ID_RECYCLE_NOTE3:"All messages would be permanently deleted.",
    ID_RECYCLE_NOTE4:"All messages have been permanently deleted.",
    ID_RECYCLE_NOTE5:"Restore",
    ID_SERVICE_UNAVAILABLE:"Service is currently unavailable, please try it later",
    ID_MVIDEO_INAVAILABLE:"Failed to initiate a video conference.",
    ID_ENTER_FAILED:"Failed to enter the conference.",
    ID_FAVORITE_NOTE:"You haven’t added any task and weibo to favorite yet. For important task and weibo, please add to favorite for attention.",
    ID_PREVIOUS_READ:"Your previous read",
    ID_NO_CONTENT:"No current content",
    ID_CHECK_DIALOGUE:"Check dialogue",
    ID_REPLY:"Reply",
    ID_REPLYALL:"Reply all",
    ID_WITH_SRC:'with source',
    ID_NO_NEWREPLY:"No new reply",
    ID_USER_REMOVED:"This user has been removed",
    ID_REMARK_COMPLETED:"Remark task completed",
    ID_DOWNLOAD_FILE:"Download file",
    ID_DOWNLOAD:"Download",
    ID_DELETE_MESSAGE:"Delete this message",
    ID_CLOUD_SAVE:"Attachment file has been saved in cloud disk.",
    ID_ATTACHED:"Attachment",
    ID_MOVETOCLOUD:"Move to cloud disk",
    ID_SHARE_CLOUD:"Share files from cloud disk",
    ID_ORIGINAL_PIC:"View original picture",
    ID_PACKUP:"Close",
    ID_VIEW_RESULT:"View result",
    ID_PREVIEW:"Preview",
    ID_DELETE_FILE:"Are you sure to delete this file?",
    ID_DELETE_TIP:"If you delete this file, your staff can not download the file.",
    ID_SHARE_WEIBO:"Share to weibo",
    ID_SHARE_LWORK:"Share to team collaboration",
    ID_WORD_REMAIN:"</span><span class=\"maxNum\">300</span><span> character remaining.",
    ID_SHARE_CLOUD:"Share files from cloud disk, please download for view.",
    ID_FAVORITE_DONE:"Add to favorite",
    ID_FAVORITE_TIME:'Data:',
    ID_TAGNAME_NOTE:"Tag name cannot more than 24 characters, you can select from existed tag name.",
    ID_TAGGED:"Tagged successful",
    ID_TAG_NOTE:"Tag cannot be empty.",
    ID_FAV_NOTE:"Are you sure to remove favorite",
    ID_FAV_NOTE_TIP:"Remove favorite does not delete the message",    
    ID_TASK_DONE:"Task has been read",
    ID_ATTEND_VOTE:"attend vote",
    ID_SET_COMPLETE:"set this task as completed task",
    ID_INVITE:"Invited",
    ID_INVITE1:"Invite",
    ID_UNKNOWN:"Unknown",
    ID_SHARE:"Share",
    ID_ANSWER:"Answer",
    ID_TRACE:"Follow",
    ID_NO_NEWUPDATE:"No new status update",
    ID_INVITATION:"The invitation has been delivered",
    ID_SELECT_INVITE:"Please select invite people!",
    ID_LWORK_PLATFORM:"LWORK platform",
    ID_MESS_ATT:"Message reminding",
    ID_ON_LWORK:"On Lwork platform",
    ID_LWORK_PLATFORM:"LWORK platform",
    ID_NEW_MESSAGE_HEADER:"【you have",
    ID_NEW_MESSAGE_CON:"new message】",
    ID_MESSAGE_NOTE:"Note:",
    ID_MESSAGE_NOTEMSG:"You have new message from Lwork!", 
    ID_WEBIM_NOTEMSG:"New instant message from ",
    ID_VIDEO_INVITE:"'s multi-part video",
    ID_VIDEO_P2PINVITE:"'s video call",
    ID_ADD_EMPTYGROUP:"This group is empty, please add member ",
    ID_SETTING:"My Profile",
    ID_CHANGE_PASSWORD:"Change Password",
    ID_CHANGE_PIC:"Change Picture",
    ID_UPLOAD_PIC:"Upload picture",
    ID_NUM_INPUT:"Please input a valid phone number, country code is essential, such as 0086 for China. ",
    ID_EMAIL:"Please input a valid email address",
    ID_SUCCESSFUL:"Change successful",
    ID_SEND_SUCCESSFUL:'Send successful',
    ID_ORG_PASSWORD:"Original password could not be empty",
    ID_NEW_PASSWORD:"New password could not be empty",
    ID_PASSWORD_LENGTH:"Password length could not less 6 letters/number/symbol ",
    ID_PSWD_MATCH:"Password doesn't match",
    ID_ORGPSWD_ERR:"Original password error",
    ID_CONFIRM_COMPLETE:"Confirm complete this task as ‘done’",
    ID_INFORM_TASK:"Inform all task member when set this task done",
    ID_DONETASK:"This task has been done",
    ID_SELETE_OPTION:"Please select the options",
    ID_VOTE_COMPLETE:"Vote complete, click to view vote result!",
    ID_REFRESH_VOTE:"Refresh vote result",
    ID_REPLY_SUCCESS:"Reply successful!",
	ID_REPLY_FAILED:'Reply Failed!',
    ID_UPDATE_TIME:"Latest update time ",
    ID_NO_RESULT:"There is no result to display",
    ID_CURRENT_FILE:"Current file",
    ID_MODERATOR:"Moderator",
    ID_SET_MODERATOR:"Set as moderator",
    ID_CONNECTING:"Connecting",
    ID_HANG_UP:"Hang Up",
    ID_HANGUP_NOTE:"Are you sure to hang up the phone?",
    ID_ATTENDEE:"Attendee",
    ID_MEETING_TOPIC:"Meeting Topic: new meeting",
    ID_NEW_MEETING:"New Meeting",
    ID_MEETING_PERIOD:"Meeting Period",
    ID_RESTART:"Restart",
    ID_ENTER_NUM:"Phone number/ Characters ",
    ID_CALL_NOTE:"Minimum attendee could not less than 2 ",
    ID_TOPIC:"Meeting topic:",
    ID_JOIN_WEIBO:"to join this weibo",
    ID_WEIBO:"Weibo",
    ID_ONLINE:"Online",
    ID_OFFLINE:"Offline",
    ID_REDAIL:"Redail",
    ID_FILENAME:"Filename",
    ID_CO_WORK:"Tasks",
    ID_VOTE:"Ballot",
    ID_FILE:"Files",
    ID_CONFERENCE_CALL:"Voice Conference",
    ID_QA:"Q&A",
    ID_BALLOT:"ballot",
    ID_VIDEOCALL:"Video call",
    ID_TICKET:"ticket",
    ID_VOTED:"Voted",
    ID_NAME:"Name:",
    ID_EMPLOYEE_NO:"Staffid:",
    ID_DEPT:"Department:",
    ID_EMAIL2:"E-Mail:", 
    ID_PHONE_MOBILE:"Mobile Number:",
    ID_PHONE_PSTN:"Pstn Number:",
    ID_PHONE_EXTENSION:"Ext Number:",
    ID_PHONE_OTHER:"Other Number:",
    ID_PHONE_CHOICE:"Please Choice Number",
    ID_DELETE:"Delete",
	ID_CHOOSEFile:'Choose File',
    ID_TAKE_WORK:"Team Collaboration",
    ID_TAKE_WEIBO:'Enterprise Weibo',    
    ID_TAKE_VOTE:'Poll',       
    ID_MAKE_CONF:'Web Video',   
    ID_TEXTING:'Web SMS',   
    ID_VOIP:'Web Call',
    ID_FORUM_TITLE:'Subject',  
    ID_FORUM_CONTENT:'Content',
    ID_FORUM_REPLY:'Write a reply...',
	ID_FORUM_SUCCESS:"Send success!",
	ID_SEARCH_TIP: '+ Add people to notify',
    ID_CHARACTER_LEFT:"You can only enter",
    ID_CHARACTER_EXCEED:"Exceed",
    ID_CONFORUM_TIP:'What’s your question?',
    ID_SUBFORUM_TIP:'Subject (Less than 200 words)',
    ID_VIDEO_FREE:'Free',
    ID_POLLSITEM_IMG:'/images/update_pic_en.png',
    ID_SEARCH_FOR:'Search about',
    ID_SEARCH_ABOUT:'for',  
    ID_UPLOAD_TIP:'File size 10M limited, Large files can share by Cloud disk!',
    ID_FORUM_POST:'Post',
    ID_FORUM_FORUMS:'Forums',
    ID_CREATE_GRUOP:"You can't leave this empty.",
    ID_GETMICRO_WRONG:'Your microphone is not working or is hardware-muted!',
    ID_VIDEO_TIP:'You have an unfinished conference from ',   
    ID_VIDEO_CONNECTIP:'Do you want re-enter this conference?',
    ID_VIDEO_RECONNECT:'re-enter',
    ID_VIDEO_USER: 'This user has been invited.', 
    ID_VIDEO_OFFLINE: "This user is currently offline, not available.", 
    ID_VIDEO_ROOM: 'The room is full.',
    ID_VIDEO_Moder: "Only moderator could invite participant.",
    ID_VIDEO_END: 'The conference is end.', 
    ID_VIDEO_EXIT: 'You have leave the conference.',
    ID_VIDEO_WAIT:'waiting...',
    ID_P2PVIDEO_FAILED:'Failed to initiate a video call.',
    ID_P2PVIDEO_ANSWER_FAILED:'Failed to answer the video call.',
    ID_P2PVIDEO_ADD_PEER_FIRST:'You should add a peer before initiating the video call.',
    ID_P2PVIDEO_OVER:'Video call is over.',
    ID_P2PVIDEO_TOO_MANY_PEERS: 'You can NOT add more than one peer in a video call.',
    ID_P2PVIDEO_PEER_REJECTED: 'Peer rejected.',
    ID_P2PVIDEO_PEER_HOOKON:'Peer terminated the video call.',
    ID_TASKS_SHORTMSG:'This tasks contains ',
    ID_TASKS_LOGIN:'. Please view by mobile app.' ,
    ID_TASKS_CONTAINERIMG: 'images',  
    ID_TASKS_CONTAINERATTACHE: 'attachment',
    ID_REPLY_DIALOG:' View dialogue',
    ID_FAVORITE_ALL:'All',
    ID_VIDEO_ALLOWINVITE:'Inviting',   
    ID_VIDEO_JOIN:'join the conference?',   
    ID_VIDEO_ALLOW:'Accept',
    ID_VIDEO_DENY:'Reject',
    ID_VIDEO_CONFIRM:'Inviting Confirm',
    ID_VIDEO_INVITED1:'Video conference invitation from',
    ID_VIDEO_INVITED2:'Do you accept to <em>end</em> current conference to join it?',
    ID_VIDEO_INVITED3:'Do you accept to <em>quit</em> current conference to join it?',
    ID_VIDEO_INVITED4:'',
    ID_VIDEO_INVITED5:'Video call from ',
    ID_VIDEO_INVITED6:'',
    ID_VIDEO_INVITED7:'Do you accept to <em>end</em> current video call to join it?',
    ID_ADDGROUP_SUCCESS:'Successful',
    ID_EXT_CONTANTS:'External Contacts',
    ID_EXT_ACCOUNT:'Account@Company ID',   
    ID_EXT_PHONE:'Phone number',  
    ID_EXT_EMAIL:'Email address',      
    ID_EXT_ADDED:'This member is existed,please try another?', 
    ID_EXT_SUCCESS:'Has been added', 
    ID_EXT_ADDNUM:'external contacts', 
    ID_EXT_DIALOGTITLE:'Adding or modifying external contacts info',
    ID_VOICE_PHONE:'Please input a valid phone number.',
    ID_NOTI_TITLE:'Desktop Notification',
    ID_NOTI_BTN1:'Yes',
    ID_NOTI_BTN2:'No,thanks',
    ID_NOTI_BTN3:'Close',
    ID_NOTI_QUS:'Do you need Lwork desktop notification?',           
    ID_NOTI_ICON:'Click icon on address bar.', 
    ID_NOTI_SELECT:'Select: notification - Always allow on this site', 
    ID_NOTI_TIP:'Showing instant notification when you have new message and invitation.',  
    ID_IM_START_IM:'Send instant message.',
    ID_IM_VIEW_MY_IM:'View instant messages.',
    ID_IM_CREATE_SESSION_FAILED:'Failed to create session.',
    ID_IM_I_INVITE:'I invited ',
    ID_IM_TO_JOIN_CHAT:' to join the chat.',
    ID_IM_ALREADY_IN_SESSION:' already in the session.',
    ID_IM_CANT_INVITE_OFFLINES:'You can NOT invite offline user.',
    ID_IM_I_QUITED:'I quited.',
    ID_IM_CHATROOM:'Session',
    ID_IM_SEND_MSG:'Send',
    ID_IM_DIRECT_SEND_TIP:'Enter: To Send',
    ID_MAIL_CC:'cc',
    ID_MAIL_SENDER:'sender',
    ID_MAIL_RECEIVER:'receiver',
    ID_MAIL_LOADING_MAIL_FAILED: 'fail to loading mail with network reason',
    ID_MAIL_LOADING:"loading mail content, please wait...",
    ID_MAIL_FETCH_LIST:"hunting mail list",
    ID_MAIL_LOGIN_SUCCESS:'succeed to login mail server',
    ID_MAIL_LOGIN_FAIL:'fail to login mail server',
    ID_MAIL_LOGINING:'logining mail server',
    ID_MAIL_SET_TIP:'please logining first',
    ID_MAIL_TRANSFER_ONLY_ONE:"only one mail can be selected",
    ID_MAIL_NEW:'new mail',
    ID_MAIL_NO_RECEIVER:'no receiver',
    ID_MAIL_ATTACH_UPLOADING:'uploading attachment, please wait',
    ID_MAIL_RECEIVER_TIP:'input receiver address(seperated by ";")',
    ID_MAIL_SENDING:'sending...',
    ID_MAIL_SENT_FAIL_REASON:'fail to send mail,reason:',
    ID_MAIL_SENT_SUCCESS:'succeed to send mail',
    ID_MAIL_CLOSE_NEW:'save？',
    ID_MAIL_CLOSE_NEW_TIP:"this email will be close, do you want to save to draft box?",
    ID_REQUEST_ERROR:'Server is busy,try again later!',
    ID_WRONG_VOIP:'Please click the "Allow" button above.'
};
var lw_lang_ch = {
    ID_NUMBER_INVALID:"请选择有效的电话号码!",
	ID_NUMBER_EMPTY:"没有登记电话号码!",
    ID_ADDSEARCH1:"通讯录中没有",
    ID_ADDSEARCH2:"相关同事",
    ID_SEARCH_ABOUT:"搜索相关的",
    ID_SEARCH_KEYWORD:"搜索关键字不能包含空格！",
    ID_UPLOAD_FILE:"上传附件",
    ID_UPLOAD_IMAGE:"上传图片",    
    ID_UPLOADING:"文件正在上传...",
    ID_IMAGE_LIMITED:"请上传不超过1M图片文件！",
    ID_FILE_FAILED:"文件传送失败！",
    ID_PREVIEW:"预览",
    ID_UPLOAD_SUCCESS:"上传成功", 
    ID_FILEUP:'上传文件到我的网盘',
    ID_LOADING:"加载中...",
    ID_IMAGE_LOADING:"图片加载中...",
    ID_CLOSE:"关闭",
    ID_PRE_IMAGE:"查看上一张图片",
    ID_NEXT_IMAGE:"查看下一张图片",
    ID_FIRST_IMAGE:"这是第一张图片",
    ID_FINAL_IMAGE:"这是最后一张图片",
    ID_DESCRIBTION:"详细描述",
    ID_INNITIALIZING_FAILED:"初始化失败。",
    ID_SEPERATED:"号码/同事/群组(;)",
    ID_SMS_CONTENT:"输入短信内容",
    ID_BUSY_LOGIN:"服务器繁忙，请重新登录！",
    ID_LOGIN_FIRST:"请您先登录！",
    ID_AT_DEPARTMENT:"@该部门",
    ID_DELETE_MEMBER:"删除成员",
    ID_DELETE_SUCCESS:"删除成功！",
    ID_RESTORE_SUCCESS:"恢复成功!",
    ID_SERVER_BUSY:"服务器繁忙，请稍后再试！",
    ID_ADD_ECTERNAL:"增加到外部联系人",
    ID_ADD_MEMBER:"添加成员",
    ID_MODIFY_MEMBER:"修改成员信息",
    ID_CHANGE_GROUPNAME:"修改组名",
    ID_GROUP_INCLUDED:"已包含该组",
    ID_INPUT_GROUPNAME:"输入组名/不能与现有的组重复",
    ID_CHANGE_SUCCESS:"修改成功！",
    ID_GROUPNAME_EMPTY:"组名不能包含空格和为空",
    ID_DELETE_GROUP:"删除该组",
    ID_SURE_DELETEGROUP:"您确定要删除该组吗？",
    ID_DONE:"完成",
    ID_NEWGROUP:"新建组",
    ID_OK:"确定",
	ID_CANCEL:'取消',
    ID_SEARCH_NAME:"通过拼音或汉字搜索添加成员",
    ID_ADD_GROUPMEMBER:"增加群组成员",
    ID_TALKING_H:"与",
    ID_PEER_RINGING:"正在振铃",
    ID_TALKING_F:'通话中',
    ID_CALL_END:"对端已挂机",
    ID_CALLING_TO:"正在呼叫",
    ID_CALLED_NUM:"请填写被叫号码",
    ID_WRONG_NUM:"所填号码有误，请重新填写",
    ID_FAILTOCALLSELF:"不能给自己发起视频",
    ID_CALLEE_OFFLINE:"对方不在线，不能发起视频，还是电话沟通吧！",
    ID_WHO_CALL:"向谁发起视频呢？",
    ID_SEARCH_CAONTACTS:"搜索/右边选择联系人",
    ID_SMS_MISSED:"短信内容不能为空！",
    ID_RECNUM_MISSED:"接收者手机号码不能为空！",
    ID_WRONGNUM:"你填写的短信接收者不对，请核对后再发送！",
    ID_WRONG_GROUPNAME:"下面的群组名不对：",
    ID_NUM_MISSED:"下面的群组用户没有登记电话号码：",
    ID_NUM_WRONG:"下面的接收者/电话号码不对：",
    ID_CONFIRM:"请确认",
    ID_CONFIRM_SEND:"是否忽略这些接收者并继续发送？",    
    ID_IGNORE:"是，忽略",
    ID_CHANGE_AGAIN:"否，我再改一下",
    ID_SEND_FAILED:"的发送失败了，请确认这些接收号码的正确性！",
    ID_FROM:"来自:",
    ID_SEND_SUCCESS:"短信已发送成功！",
    ID_SMSCONTENT:"短信内容： ",
    ID_RECEIVER:"发送对象：",
    ID_SEND_TIME:"发送时间",
    ID_RESEND:"重新发送",
    ID_SMS_RECORD:"没有已发送短信记录！",
    ID_TWO_OPTIONS:"集体决策不能少于两个选项！",
    ID_QUESTION:"问题",
	ID_TAG_BT:'标签：',
    ID_TAGS:"打个标签便于今后查找，可以设置5个标签，空格分开",
    ID_TAG_SEPERATED:"标签：最多5个标签，用空格",
    ID_OPTION:"选项",
    ID_CANNOT_SEND:"等没有登记手机号，不能向其发送！",
    ID_SMS_NOTICE:"短信提醒",
    ID_SMS_REMIND:"是否需要短信提醒不在线同事查收这条任务？",
    ID_REMIND:"提醒",
    ID_ADD_TAG:"给你的关注加个标签吧，可以更方便查看关注哦！",
    ID_TAG_MANAGEMENT:"管理标签",
    ID_FAVORITE_REMOVE:"取消关注",
    ID_ADD_FAVORITE:"关注",
    ID_UNTAGGED:"未加标签",
    ID_TAG:"加标签",
    ID_IF_REMOVETAG:"你确定要删除当前标签吗?",
    ID_DELETETAG_NOTE:"删除标签不会把具有该标签的消息从关注中删除。",
    ID_TAG_EMPTY:"标签不能为空！",
    ID_EXIT:"退出管理",
    ID_MANAGE_TAG:"管理标签",
    ID_REMOVE_FAVORITE:"删除之前请先取消关注！",
    ID_RESTORED:"已恢复！",
    ID_RECYCLE_EMPTY:"您的回收站已清空",
    ID_DELETE_NOTE1:"你确认要永久删除这条消息吗？",
    ID_DELETE_NOTE2:"永久删除后将无法查看该消息。",
    ID_PERMANENTLY_DELETE:"已永久删除！",
    ID_RECYCLE_NOTE1:"永久刪除", 
    ID_RECYCLE_NOTE2:"你确认要清空回收站吗？", 
    ID_RECYCLE_NOTE3:"清空回收站将永久删除这些消息。",
    ID_RECYCLE_NOTE4:"所有消息已永久删除！",
    ID_RECYCLE_NOTE5:"恢復",
    ID_SERVICE_UNAVAILABLE:"服务器繁忙，请稍后再试！",
    ID_MVIDEO_INAVAILABLE:"发起视频失败！",
    ID_ENTER_FAILED:"加入视频会议失败！",
    ID_FAVORITE_NOTE:"你还没有关注任何微博和任务呢！ 对于重要的微博或者任务，赶紧关注一下哦！",
    ID_PREVIOUS_READ:"之前看到这里了哟~",
    ID_NO_CONTENT:"您当前没有任何内容",
    ID_CHECK_DIALOGUE:"查看对话",
    ID_REPLY:"回复",
    ID_REPLYALL:"回复所有人",
    ID_WITH_SRC:'带原文',
    ID_NO_NEWREPLY:"您当前没有新回复",
    ID_USER_REMOVED:"该员工已删除",
    ID_REMARK_COMPLETED:"标记完成",
    ID_DOWNLOAD_FILE:"文件下载",
    ID_DOWNLOAD:"下载",
    ID_DELETE_MESSAGE:"删除此消息",
    ID_CLOUD_SAVE:"已经将附件保存到网盘！",
    ID_ATTACHED:"附件",
    ID_MOVETOCLOUD:"转到网盘",
    ID_SHARE_CLOUD:"通过网盘分享文件：",
    ID_ORIGINAL_PIC:"查看原图",
    ID_PACKUP:"收起",
    ID_VIEW_RESULT:"查看结果",
    ID_PREVIEW:"预览",
    ID_DELETE_FILE:"你确定要删除这个文件吗？",
    ID_DELETE_TIP:"文件删除后会造成你之前共享的同事不能下载该文件。",
    ID_SHARE_WEIBO:"分享到企业微博",
    ID_SHARE_LWORK:"分享到工作协同",
    ID_WORD_REMAIN:"还能输入</span><span class=\"maxNum\">300</span><span>个字",
    ID_SHARE_CLOUD:"通过网盘分享文件，下载下来看看吧~",
    ID_FAVORITE_DONE:"添加关注成功！",
    ID_FAVORITE_TIME:'关注时间：',
    ID_TAGNAME_NOTE:"标签1~12个字，不能有空格，可以已有标签中选择：",
    ID_TAGGED:"打标签成功！",
    ID_TAG_NOTE:"标签不能为空！",
    ID_FAV_NOTE:"你确定要取消关注吗？",
    ID_FAV_NOTE_TIP:"取消关注不会删除该消息。",  
    ID_TASK_DONE:"阅读了该任务",
    ID_ATTEND_VOTE:"参与了投票",
    ID_SET_COMPLETE:"将该任务状态设置为完成",
    ID_INVITE:"邀请了 ",
    ID_INVITE1:"邀请",
    ID_UNKNOWN:"未知",
    ID_SHARE:"分享",
    ID_ANSWER:"回答",
    ID_TRACE:"动态",
    ID_NO_NEWUPDATE:"当前没有任何动态！",
    ID_INVITATION:"已发送您的邀请！",
    ID_SELECT_INVITE:"请选择邀请人！",
    ID_LWORK_PLATFORM:"LWORK工作平台",
    ID_MESS_ATT:"消息提醒",
    ID_ON_LWORK:"在Lwork工作平台，",
    ID_LWORK_PLATFORM:"LWORK工作平台",
    ID_NEW_MESSAGE_HEADER:"【您有",
    ID_NEW_MESSAGE_CON:"条新消息】",
  //  ID_NEW_MESSAGE:"【 您有\" + num + \"条新消息 】 - ", 
    ID_MESSAGE_NOTE:"消息提醒:",
	ID_MESSAGE_NOTEMSG:"您在Lwork工作平台有新消息",
    ID_WEBIM_NOTEMSG:"您有新的即时消息,来自",
    ID_VIDEO_INVITE:"邀请您参加多方视频",
    ID_VIDEO_P2PINVITE:"邀请与您视频通话",
    ID_ADD_EMPTYGROUP:"您所选择的组没有成员，请添加成员或输入内容！",
    ID_SETTING:"个人信息设置",
    ID_CHANGE_PASSWORD:"修改密码",
    ID_CHANGE_PIC:"更改图像",
    ID_UPLOAD_PIC:"请上传图片文件！",
    ID_NUM_INPUT:"请输入正确的手机号，须包含国家码,如中国 0086！",
    ID_EMAIL:"请输入正确的邮箱！",
    ID_SUCCESSFUL:"更改成功！",
    ID_SEND_SUCCESSFUL:"发布成功！",   
    ID_ORG_PASSWORD:"原密码不能为空",
    ID_NEW_PASSWORD:"新密码不能为空",
    ID_PASSWORD_LENGTH:"密码长度不能小于6位",
    ID_PSWD_MATCH:"重复密码不一致",
    ID_ORGPSWD_ERR:"原始密码输入错误",
    ID_CONFIRM_COMPLETE:"你确认要将这条任务设置为完成吗？",
    ID_INFORM_TASK:"设置为完成将通知所有任务成员。",
    ID_DONETASK:"该任务状态已设置为完成！",
    ID_SELETE_OPTION:"请选择投票项！"  ,
    ID_VOTE_COMPLETE:"投票成功，可点击查看投票结果！",
    ID_REFRESH_VOTE:"刷新投票结果",
    ID_REPLY_SUCCESS:"回复成功！",
	ID_REPLY_FAILED:'回复失败',
    ID_UPDATE_TIME:"更新时间",
    ID_NO_RESULT:"没有搜索到任何消息",
    ID_CURRENT_FILE:"当前文件",
    ID_MODERATOR:"主持人",
    ID_SET_MODERATOR:"设为主持人",
    ID_CONNECTING:"正在连接...",
    ID_HANG_UP:"挂断",
    ID_HANGUP_NOTE:"您确认要挂断吗？",
    ID_ATTENDEE:"会议成员",
    ID_MEETING_TOPIC:"会议主题:新会议",
    ID_NEW_MEETING:"新会议",
    ID_MEETING_PERIOD:"会议时长",
    ID_RESTART:"重新发起",
    ID_ENTER_NUM:"输入电话号码/拼音或汉字",
    ID_CALL_NOTE:"会议成员不能少于两位！",
    ID_TOPIC:"会议主题：",
    ID_ONLINE:"在线",
    ID_OFFLINE:"离线",
    ID_REDAIL:"重拨",
    ID_FILENAME:"文件名",
    ID_CO_WORK:"工作协同",
    ID_WEIBO:"微博",
    ID_JOIN_WEIBO:"加入了该微博",
    ID_FILE:"文件",
    ID_CONFERENCE_CALL:"电话会议",
    ID_TASKS:"工作协同",
    ID_QA:"企业百科",
    ID_BALLOT:"集体决策",
    ID_VIDEOCALL:"视频通话",
	ID_VOTE:"投票",
    ID_VOTED:"已投票",
    ID_TICKET:"票",
    ID_NAME:"姓名：",
    ID_EMPLOYEE_NO:"工号：",
    ID_DEPT:"部门：",
    ID_EMAIL2:"邮箱：", 
    ID_PHONE_MOBILE:"手机：",
    ID_PHONE_PSTN:"固话：",
    ID_PHONE_EXTENSION:"分机：",
    ID_PHONE_OTHER:"其他：",
    ID_PHONE_CHOICE:"请选择号码",
    ID_DELETE:"删除", 
	ID_CHOOSEFile:'上传文件',
    ID_TAKE_WORK:"工作协同",
    ID_TAKE_WEIBO:'企业微博',    
    ID_TAKE_VOTE:'集体决策',       
    ID_MAKE_CONF:'视频会议',   
    ID_TEXTING:'Web短信',   
    ID_VOIP:'Web电话',
    ID_FORUM_TITLE:'标题',  
    ID_FORUM_CONTENT:'内容',
    ID_FORUM_REPLY:'输入回复内容',
    ID_FORUM_SUCCESS:"发帖成功！",
	ID_SEARCH_TIP: '直接输入拼音/汉字搜索同事',
    ID_CHARACTER_LEFT:"还能输入",
    ID_CHARACTER_EXCEED:"超出",
    ID_CONFORUM_TIP:'输入内容',
    ID_SUBFORUM_TIP:'不多于200字',
    ID_VIDEO_FREE:'空闲',
    ID_POLLSITEM_IMG:'/images/update_pic.png',
    ID_SEARCH_FOR:'搜索包含',
    ID_SEARCH_ABOUT:'的',
    ID_UPLOAD_TIP:'须小于10M，大文件通过网盘分享',
    ID_FORUM_POST:'发帖',    
    ID_FORUM_FORUMS:'帖子',
    ID_CREATE_GRUOP:'组名不能为空',
    ID_GETMICRO_WRONG:'获取本地媒体失败，摄像头或麦克风不可用',
    ID_VIDEO_RECONNECT:'重新进入',
    ID_VIDEO_CONNECTIP:'是否重新进入该视频会议？',
    ID_VIDEO_TIP:'你有一个视频会议还未结束, 来自：',
    ID_VIDEO_USER: '该用户已被邀请！',
    ID_VIDEO_OFFLINE: '该用户不在线，不能参加视频！',
    ID_VIDEO_ROOM: '会议室已满，没有空位置！',
    ID_VIDEO_Moder: '你不是会议主席，不能邀请！',
    ID_VIDEO_END: '多方视频已结束！',
    ID_VIDEO_EXIT: '已退出多方视频！',
    ID_VIDEO_WAIT:'等待加入',
    ID_P2PVIDEO_FAILED: '发起视频通话失败！',
    ID_P2PVIDEO_ANSWER_FAILED: '接受视频通话失败！',
    ID_P2PVIDEO_ADD_PEER_FIRST: '请先添加对端才能发起视频通话！',
    ID_P2PVIDEO_OVER: '视频通话结束',
    ID_P2PVIDEO_TOO_MANY_PEERS: '视频通话只能添加一个对端！', 
    ID_P2PVIDEO_PEER_REJECTED: '对端未应答您的视频通话请求!', 
    ID_P2PVIDEO_PEER_HOOKON: '对端已结束视频通话！',
    ID_TASKS_SHORTMSG:'该任务包含',
    ID_TASKS_LOGIN:'请登录LWORK手机版查看',
    ID_TASKS_CONTAINERIMG: '图片',  
    ID_TASKS_CONTAINERATTACHE: '附件',    
    ID_REPLY_DIALOG:'查看对话',
    ID_FAVORITE_ALL:'全部',
    ID_VIDEO_ALLOWINVITE:'你确认邀请',   
    ID_VIDEO_JOIN:'加入视频会议吗？',   
    ID_VIDEO_ALLOW:'接受',
    ID_VIDEO_DENY:'拒绝',
    ID_VIDEO_CONFIRM:'视频邀请',
    ID_VIDEO_INVITED1:'来自',
    ID_VIDEO_INVITED2:'如果接受，将结束当前的会议。',
    ID_VIDEO_INVITED3:'如果接受，你将结束退出当前会议。',
    ID_VIDEO_INVITED4:'视频邀请',
    ID_VIDEO_INVITED5:'来自 ',
    ID_VIDEO_INVITED6:'的视频通话呼叫',
    ID_VIDEO_INVITED7:'如果接受，将结束当前视频通话。',
    ID_ADDGROUP_SUCCESS:'添加成功',
    ID_EXT_CONTANTS:'公司外部联系人',
    ID_EXT_ACCOUNT:'输入工号@公司代号',   
    ID_EXT_PHONE:'输入手机号码',  
    ID_EXT_EMAIL:'输入email地址',      
    ID_EXT_ADDED:'该成员已经加入外部联系人列表', 
    ID_EXT_SUCCESS:'成功增加', 
    ID_EXT_ADDNUM:'名外部联系人', 
    ID_EXT_DIALOGTITLE:'增加或修改外部人员信息',
    ID_VOICE_PHONE:'被叫号码格式不对',
    ID_NOTI_TITLE:'桌面提醒',
    ID_NOTI_BTN1:'好的',   
    ID_NOTI_BTN2:'不,谢谢', 
    ID_NOTI_BTN3:'关闭',          
    ID_NOTI_QUS:'您是否需要Lwork桌面提醒功能?',
    ID_NOTI_ICON:'单击地址栏小图标',
    ID_NOTI_SELECT:'在弹出菜单中选择:通知 - 永远在这个网站上执行',
    ID_NOTI_TIP:'及时提醒您来自同事发来的消息和邀请。',
    ID_IM_START_IM:'发送即时消息',
    ID_IM_VIEW_MY_IM:'查看即时消息',
    ID_IM_CREATE_SESSION_FAILED:'创建会话失败！',
    ID_IM_I_INVITE:'我邀请了',
    ID_IM_TO_JOIN_CHAT:'加入聊天',
    ID_IM_ALREADY_IN_SESSION:'已经在当前的会话中！',
    ID_IM_CANT_INVITE_OFFLINES:'不能邀请不在线的用户！',
    ID_IM_I_QUITED:'我已经退出了聊天。',
    ID_IM_CHATROOM:'聊天室',
    ID_IM_SEND_MSG:'发送',
    ID_IM_DIRECT_SEND_TIP:'回车：发送',
    ID_MAIL_CC:'抄送',
    ID_MAIL_SENDER:'发件人',
    ID_MAIL_RECEIVER:'收件人',
    ID_MAIL_LOADING_MAIL_FAILED: '网络原因邮件加载不成功',
    ID_MAIL_LOADING:"正在加载邮件内容，请稍等",
    ID_MAIL_FETCH_LIST:"正在获取邮件列表",
    ID_MAIL_LOGIN_SUCCESS:'邮箱登录成功',
    ID_MAIL_LOGIN_FAIL:'邮箱登录失败',
    ID_MAIL_LOGINING:'邮箱登录中',
    ID_MAIL_SET_TIP:'请设置邮箱',
    ID_MAIL_TRANSFER_ONLY_ONE:"只能选择一封邮件转发",
    ID_MAIL_NEW:'新建便签',
    ID_MAIL_NO_RECEIVER:'未填收件人',
    ID_MAIL_ATTACH_UPLOADING:'附件上传中，请稍后发送',
    ID_MAIL_RECEIVER_TIP:'输入收件人邮箱地址(以;分隔)',
    ID_MAIL_SENDING:'邮件发送中...',
    ID_MAIL_SENT_FAIL_REASON:'邮件发送失败,原因:',
    ID_MAIL_SENT_SUCCESS:'邮件发送成功',
    ID_MAIL_CLOSE_NEW:'要存入草稿箱吗？',
    ID_MAIL_CLOSE_NEW_TIP:"点击确定保存到草稿箱，点击取消将不会保存所有修改",
    ID_REQUEST_ERROR:'服务器繁忙，稍后再试！',
    ID_WRONG_VOIP:'请点击上方允许使用麦克风按钮。'
};

function QueryString(uriStr){
  var sea =  (window.location.search).slice(1);
  var str = sea.split('&');
  var query;  
  for(var i =0 ; i < str.length; i++){
    query = str[i].split('=');
	if( query[0] == uriStr ) return query[1] ;
  }
  return ''	
};
var lw_lang ;
if(QueryString('language') == 'en')  {
    lw_lang = lw_lang_en ;
    $('body, input, textarea').css('font-family','Helvetica, Arial, sans-serif');
}else{
    lw_lang = lw_lang_ch;
     $('body, input, textarea').css('font-family','"微软雅黑"');
}
$('#polls_option').find('.display_img').attr('src', lw_lang.ID_POLLSITEM_IMG)
var SERVER_ADDR_FZD = lworkVideoDomain;//"http://116.228.53.181";
var LWAPI = {
    createNew: function() {
        var api = {};
        var check_status = function(data, cb, failedcb) {
            var status = data['status'];
            if (status == 'ok') {
                if(cb) cb(data);
            } else {
			    if(failedcb) failedcb(data['reason']);
            }
        };
		var errorHandle = function(){			
			LWORK.msgbox.show(lw_lang.ID_REQUEST_ERROR, 5, 1000);	
			$('.loadmore_msg').remove();
		}
        api.check_status = check_status;
        api.post = function(url, data, callback, failedcb) {
            $.ajax({
                type: 'POST',
                url: SERVER_ADDR_FZD+url,
                data: JSON.stringify(data),
                success: function(data) {
                    check_status(data, callback, failedcb);
                },
                error: function(xhr) {
                   if(failedcb) failedcb();
                }
            });
        };
        api.put = function(url, data, callback) {
            $.ajax({
                type: 'PUT',
                url: SERVER_ADDR_FZD+url,
                data: JSON.stringify(data),
                success: function(data) {
                    check_status(data, callback);
                },
                error: function(xhr) {
                   errorHandle();
                },		
                dataType: 'JSON'
            });
        };
        api.get = function(url, data, callback, failedcb) {
            $.ajax({
                type: 'GET',
                url: SERVER_ADDR_FZD+url + '?' + $.param(data),
				dataType: 'JSON',
                success: function(data) {
                    check_status(data, callback, failedcb);
                },
                error: function(xhr) {
                    if(failedcb) failedcb();
                }
            });
        };
        api.del = function(url, data, callback) {
            $.ajax({
                type: 'DELETE',
                url: SERVER_ADDR_FZD+url + '?' + $.param(data),
                success: function(data) {
                    check_status(data, callback);
                },
				error: function(xhr) {
                    errorHandle();
                //  if (failedcb) failedcb(xhr['status']);
                },
                dataType: 'JSON'
            });
        };
        return api;
    }
};




var VoipAPI = {
    createNew: function(){
        var api = LWAPI.createNew();
        api.start = function(params, cb, fb){
            var url = '/lwork/voices/fzdvoip';
            var data=params;
            data['t'] = new Date().getTime();
            api.post(url, data, cb, fb);
        };
        api.stop = function(uuid, sessionID, cb, fb){
            var url = '/lwork/voices/fzdvoip/delete';
            var data = {uuid:uuid, session_id:sessionID, 't': new Date().getTime()};
            api.get(url, data, cb, fb);
        };
        api.get_status = function(uuid, sessionID, cb, fb){
            var url = '/lwork/voices/fzdvoip/status';
            var data = {uuid:uuid, session_id:sessionID, 't': new Date().getTime()};
            api.get(url, data, cb, fb);
        };
        api.get_qos_status = function(uuid, sessionID, cb, fb){
            var url = '/lwork/voices/fzdvoip/status_with_qos';
            var data = {uuid:uuid, session_id:sessionID, 't': new Date().getTime()};
            api.get(url, data, cb, fb);
        };
        api.dtmf = function(uuid, sessionID, dtmfList, cb, fb){
            var url = '/lwork/voices/voip/dtmf';
            var data = {uuid:uuid, session_id:sessionID, dtmf:dtmfList, 't': new Date().getTime()};
            api.post(url, data, cb, fb);
        }
        return api;
    }
}




var api = {
   // group: GroupAPI.createNew(),
   //   request:LWAPI.createNew(),
   // file: DocumentAPI.createNew(),
  //  content:ContentAPI.createNew(),
  //  meeting: MeetingAPI.createNew(),
  //  focus: FocusAPI.createNew(),
  //  sms:SMSAPI.createNew(),
    voip:VoipAPI.createNew()
  //  video:videoAPI.createNew(),
  //  im:IMAPI.createNew()
}


/*
msg type:
1,2,3 success
4: warnning
5: error
*/

function pageTips(target, text){
  target.addClass('error')
  if(target.find('.pageTips').length > 0){
	target.find('.pageTips').text(text);
  }else{
	target.append('<span class="pageTips">'+ text +'</span>'); 
  }
}

function removePageTips(target){
  target.removeClass('error');
  target.find('.pageTips').remove();    
}



window.LWORK=window.LWORK || {};
LWORK.dom = {getById: function(id) {
        return document.getElementById(id);
    },get: function(e) {
        return (typeof (e) == "string") ? document.getElementById(e) : e;
    },createElementIn: function(tagName, elem, insertFirst, attrs) {
        var _e = (elem = LWORK.dom.get(elem) || document.body).ownerDocument.createElement(tagName || "div"), k;
        if (typeof (attrs) == 'object') {
            for (k in attrs) {
                if (k == "class") {
                    _e.className = attrs[k];
                } else if (k == "style") {
                    _e.style.cssText = attrs[k];
                } else {
                    _e[k] = attrs[k];
                }
            }
        }
        insertFirst ? elem.insertBefore(_e, elem.firstChild) : elem.appendChild(_e);
        return _e;
    },getStyle: function(el, property) {
        el = LWORK.dom.get(el);
        if (!el || el.nodeType == 9) {
            return null;
        }
        var w3cMode = document.defaultView && document.defaultView.getComputedStyle, computed = !w3cMode ? null : document.defaultView.getComputedStyle(el, ''), value = "";
        switch (property) {
            case "float":
                property = w3cMode ? "cssFloat" : "styleFloat";
                break;
            case "opacity":
                if (!w3cMode) {
                    var val = 100;
                    try {
                        val = el.filters['DXImageTransform.Microsoft.Alpha'].opacity;
                    } catch (e) {
                        try {
                            val = el.filters('alpha').opacity;
                        } catch (e) {
                        }
                    }
                    return val / 100;
                } else {
                    return parseFloat((computed || el.style)[property]);
                }
                break;
            case "backgroundPositionX":
                if (w3cMode) {
                    property = "backgroundPosition";
                    return ((computed || el.style)[property]).split(" ")[0];
                }
                break;
            case "backgroundPositionY":
                if (w3cMode) {
                    property = "backgroundPosition";
                    return ((computed || el.style)[property]).split(" ")[1];
                }
                break;
        }
        if (w3cMode) {
            return (computed || el.style)[property];
        } else {
            return (el.currentStyle[property] || el.style[property]);
        }
    },setStyle: function(el, properties, value) {
        if (!(el = LWORK.dom.get(el)) || el.nodeType != 1) {
            return false;
        }
        var tmp, bRtn = true, w3cMode = (tmp = document.defaultView) && tmp.getComputedStyle, rexclude = /z-?index|font-?weight|opacity|zoom|line-?height/i;
        if (typeof (properties) == 'string') {
            tmp = properties;
            properties = {};
            properties[tmp] = value;
        }
        for (var prop in properties) {
            value = properties[prop];
            if (prop == 'float') {
                prop = w3cMode ? "cssFloat" : "styleFloat";
            } else if (prop == 'opacity') {
                if (!w3cMode) {
                    prop = 'filter';
                    value = value >= 1 ? '' : ('alpha(opacity=' + Math.round(value * 100) + ')');
                }
            } else if (prop == 'backgroundPositionX' || prop == 'backgroundPositionY') {
                tmp = prop.slice(-1) == 'X' ? 'Y' : 'X';
                if (w3cMode) {
                    var v = LWORK.dom.getStyle(el, "backgroundPosition" + tmp);
                    prop = 'backgroundPosition';
                    typeof (value) == 'number' && (value = value + 'px');
                    value = tmp == 'Y' ? (value + " " + (v || "top")) : ((v || 'left') + " " + value);
                }
            }
            if (typeof el.style[prop] != "undefined") {


                el.style[prop] = value + (typeof value === "number" && !rexclude.test(prop) ? 'px' : '');
                bRtn = bRtn && true;
            } else {
                bRtn = bRtn && false;
            }
        }
        return bRtn;
    },getScrollTop: function(doc) {
        var _doc = doc || document;
        return Math.max(_doc.documentElement.scrollTop, _doc.body.scrollTop);
    },getClientHeight: function(doc) {
        var _doc = doc || document;
        return _doc.compatMode == "CSS1Compat" ? _doc.documentElement.clientHeight : _doc.body.clientHeight;
    }
};

LWORK.string = {RegExps: {trim: /^\s+|\s+$/g,ltrim: /^\s+/,rtrim: /\s+$/,nl2br: /\n/g,s2nb: /[\x20]{2}/g,URIencode: /[\x09\x0A\x0D\x20\x21-\x29\x2B\x2C\x2F\x3A-\x3F\x5B-\x5E\x60\x7B-\x7E]/g,escHTML: {re_amp: /&/g,re_lt: /</g,re_gt: />/g,re_apos: /\x27/g,re_quot: /\x22/g},escString: {bsls: /\\/g,sls: /\//g,nl: /\n/g,rt: /\r/g,tab: /\t/g},restXHTML: {re_amp: /&amp;/g,re_lt: /&lt;/g,re_gt: /&gt;/g,re_apos: /&(?:apos|#0?39);/g,re_quot: /&quot;/g},write: /\{(\d{1,2})(?:\:([xodQqb]))?\}/g,isURL: /^(?:ht|f)tp(?:s)?\:\/\/(?:[\w\-\.]+)\.\w+/i,cut: /[\x00-\xFF]/,getRealLen: {r0: /[^\x00-\xFF]/g,r1: /[\x00-\xFF]/g},format: /\{([\d\w\.]+)\}/g},commonReplace: function(s, p, r) {
        return s.replace(p, r);
    },format: function(str) {
        var args = Array.prototype.slice.call(arguments), v;
        str = String(args.shift());
        if (args.length == 1 && typeof (args[0]) == 'object') {
            args = args[0];
        }
        LWORK.string.RegExps.format.lastIndex = 0;
        return str.replace(LWORK.string.RegExps.format, function(m, n) {
            v = LWORK.object.route(args, n);
            return v === undefined ? m : v;
        });
    }};


LWORK.object = {
	routeRE: /([\d\w_]+)/g,
	route: function(obj, path) {
        obj = obj || {};
        path = String(path);
        var r = LWORK.object.routeRE, m;
        r.lastIndex = 0;
        while ((m = r.exec(path)) !== null) {
            obj = obj[m[0]];
            if (obj === undefined || obj === null) {
                break;
            }
        }
        return obj;
  }};
var ua = LWORK.userAgent = {}, agent = navigator.userAgent;
ua.ie = 9 - ((agent.indexOf('Trident/5.0') > -1) ? 0 : 1) - (window.XDomainRequest ? 0 : 1) - (window.XMLHttpRequest ? 0 : 1);
if (typeof (LWORK.msgbox) == 'undefined') {
    LWORK.msgbox = {};
}
LWORK.msgbox._timer = null;
LWORK.msgbox.loadingAnimationPath = LWORK.msgbox.loadingAnimationPath || ("loading.gif");
LWORK.msgbox.show = function(msgHtml, type, timeout, opts) {
    if (typeof (opts) == 'number') {
        opts = {topPosition: opts};
    }
    opts = opts || {};
    var _s = LWORK.msgbox,
	 template = '<span class="zeng_msgbox_layer" style="display:none;z-index:10000;" id="mode_tips_v2"><span class="gtl_ico_{type}"></span>{loadIcon}{msgHtml}<span class="gtl_end"></span></span>', loading = '<img src="' + (opts.customIcon || _s.loadingAnimationPath) + '" alt="" />', typeClass = [0, 0, 0, 0, "succ", "fail", "clear"], mBox, tips;
    _s._loadCss && _s._loadCss(opts.cssPath);
    mBox = LWORK.dom.get("q_Msgbox") || LWORK.dom.createElementIn("div", document.body, false, {className: "zeng_msgbox_layer_wrap"});
    mBox.id = "q_Msgbox";
    mBox.style.display = "";
    mBox.innerHTML = LWORK.string.format(template, {type: typeClass[type] || "hits",msgHtml: msgHtml || "",loadIcon: type == 6 ? loading : ""});
    _s._setPosition(mBox, timeout, opts.topPosition);
};
LWORK.msgbox._setPosition = function(tips, timeout, topPosition) {
    timeout = timeout || 5000;
    var _s = LWORK.msgbox, bt = LWORK.dom.getScrollTop(), ch = LWORK.dom.getClientHeight(), t = Math.floor(ch / 2) - 40;
    LWORK.dom.setStyle(tips, "top", ((document.compatMode == "BackCompat" || LWORK.userAgent.ie < 7) ? bt : 0) + ((typeof (topPosition) == "number") ? topPosition : t) + "px");
    clearTimeout(_s._timer);
    tips.firstChild.style.display = "";
    timeout && (_s._timer = setTimeout(_s.hide, timeout));
};
LWORK.msgbox.hide = function(timeout) {
    var _s = LWORK.msgbox;
    if (timeout) {
        clearTimeout(_s._timer);
        _s._timer = setTimeout(_s._hide, timeout);
    } else {
        _s._hide();
    }
};
LWORK.msgbox._hide = function() {
    var _mBox = LWORK.dom.get("q_Msgbox"), _s = LWORK.msgbox;
    clearTimeout(_s._timer);
    if (_mBox) {
        var _tips = _mBox.firstChild;
        LWORK.dom.setStyle(_mBox, "display", "none");
    }
};


var localMedia = null;

function obtainLocalMedia(videoPara, onLocalStream, onError){
	if (localMedia){
		localMedia.referenceCount += 1;
		onLocalStream(localMedia.stream);
	}else{
	    var mediaAttr = {'audio':true, 'video': videoPara};
	    navigator.webkitGetUserMedia(mediaAttr,
			function(stream){
				localMedia = {stream:stream, referenceCount:1};
				onLocalStream(stream);
			}, 
		    function(){if (onError){onError("获取本地媒体失败");}});
	}
}

function releaseLocalMedia(){
	if (localMedia){
		if (localMedia.referenceCount == 1){
			localMedia.stream.stop();
			localMedia = null;
		}else{
			localMedia.referenceCount -= 1;
		}
	}
}

//webrtcClient
function webrtcClient(owner){
	this.service = 'video';
	this.mediaParas = null;
	this.owner = owner;
	this.localStream = null;
	this.pc = null;
	this.asCaller = true;
	this.peerSDP = '';

	this.prepareCall = function(service, mediaParas, peerSDP){
		var self = this;
		self.service = service;
		self.mediaParas = (service == "video" ? mediaParas : false);
		if (peerSDP){
			self.asCaller = false;
			self.peerSDP = peerSDP;
		}else{
			self.asCaller = true;
			self.peerSDP = '';
		}
		//self.obtainLocalStream();
		obtainLocalMedia(self.mediaParas, self.onGotLocalStream(), function(Er){self.owner.onWrtcError(Er);})
	};

	this.terminateCall = function(){
		if (this.pc) this.pc.close();
		this.pc = null;
		//if(this.localStream) this.localStream.stop();
		if(this.localStream) releaseLocalMedia();
		this.localStream = null;
//		this.asCaller = true;
	    this.peerSDP = '';
	};

	this.setRemoteSDP = function(sdp){
		if (this.asCaller){
		    this.pc.setRemoteDescription(new RTCSessionDescription({type:'answer',sdp:sdp}));
		}
	};

	this.onPeerCandidate = function(data) {
		if(this.pc) {
	        var candidate = new RTCIceCandidate({
	            sdpMLineIndex: data.label,
	            candidate: data.candidate
	        });
	        this.pc.addIceCandidate(candidate);
		}
	};
	this.onGotLocalStream = function(){
		var curObj = this;
		return function(stream){
			curObj.localStream = stream;
			var MediaURL = webkitURL.createObjectURL(stream);
			curObj.owner.onLocalStream(MediaURL);
			curObj.initiatePeerConnection();
		};
	};

    this.pc_onICE = function(){
    	var curObj = this;
    	return function(event){
    		if (event.candidate) {
//		        curObj.owner.onIceCandidate(event.candidate);

		    }else {
/*		    	var sdpConstraints = (curObj.service == 'video') ? {'mandatory': {
                          'OfferToReceiveAudio':true, 
                          'OfferToReceiveVideo':true }} : null;
				if (curObj.asCaller){
				    curObj.pc.createOffer(curObj.pc_onGotLocalDescription(), null, sdpConstraints);
			    }else{
			    	curObj.pc.createAnswer(curObj.pc_onGotLocalDescription(), null, sdpConstraints);
			    }*/
		    }
    	};
    };

    this.pc_onRemoteStreamAdded = function(){
    	var curObj = this;
    	return function(e){
    		var remoteStreamURI = webkitURL.createObjectURL(e.stream);
    		curObj.owner.onRemoteStream(remoteStreamURI);
    	};
    };

    this.pc_onGotLocalDescription = function(){
    	var curObj = this;
    	return function(desc){
//    		if (curObj.getOriginalVersionNo(desc.sdp) == '2'){
    			curObj.pc.setLocalDescription(desc);
//    		}else if (curObj.getOriginalVersionNo(desc.sdp) == '3'){
                curObj.owner.onLocalSDP(desc.sdp);
//    		}
    	};
    };

	//// inner functions
	this.obtainLocalStream = function(){
		var curObj = this;
	    var mediaAttr = null;
	    var mediaErrorTip = '';
	    switch (this.service){
	    	case 'video':
	    	    mediaAttr = {'audio':true, 'video':(this.mediaParas ? this.mediaParas : true)};
	    	    mediaErrorTip = '获取媒体失败';
	    	    break;
	    	case 'audio':
	    	    mediaAttr = {'audio':true, 'video':false};
	    	    mediaErrorTip = '获取媒体失败' ;
	    	    break;
	    	default:
	    	    break;
	    }
        if (mediaAttr){
		    navigator.webkitGetUserMedia(mediaAttr,
				curObj.onGotLocalStream(), 
			    function(){
			    	curObj.owner.onWrtcError(mediaErrorTip);
			    });
	    }
	};

	this.initiatePeerConnection = function(){
		var curObj = this;
		var servers = null;
		//var servers = {"iceServers": [{"url": "stun:stun.l.google.com:19302"}]};
		//var servers = {"iceServers": [{"url": "stun:10.32.3.52:19303"}, {"url": "stun:202.122.107.66:19303"}]};
		if (curObj.pc){
			curObj.pc.close();
			curObj.pc = null;
		}
		curObj.pc = new webkitRTCPeerConnection(servers, {optional: [{"DtlsSrtpKeyAgreement": false}]});
		curObj.pc.onicecandidate = curObj.pc_onICE();
		curObj.pc.onaddstream = curObj.pc_onRemoteStreamAdded();
		curObj.pc.addStream(curObj.localStream);

		var sdpConstraints = (curObj.service == 'video') ? {'mandatory': {
                          'OfferToReceiveAudio':true, 
                          'OfferToReceiveVideo':true }} : null;
		if (curObj.asCaller){
		    curObj.pc.createOffer(curObj.pc_onGotLocalDescription(), null, sdpConstraints);
	    }else{
	    	curObj.pc.setRemoteDescription(new RTCSessionDescription({type:'offer',sdp:curObj.peerSDP}));
			curObj.pc.createAnswer(curObj.pc_onGotLocalDescription(), null, sdpConstraints);
	    }
	};

    this.getOriginalVersionNo = function(sdpTxt){
    	return sdpTxt.substring(sdpTxt.indexOf("o=")).split(' ')[2];
    }
}


function urlDecode(str){
    str=str.replace(new RegExp('\\+','g'),' ');
    return unescape(str);
}
function urlEncode(str){
    str=escape(str);
    str=str.replace(new RegExp('\\+','g'),'%2B');
    return str.replace(new RegExp('%20','g'),'+');
}

var END_OF_INPUT = -1;

var base64Chars = new Array(
    'A','B','C','D','E','F','G','H',
    'I','J','K','L','M','N','O','P',
    'Q','R','S','T','U','V','W','X',
    'Y','Z','a','b','c','d','e','f',
    'g','h','i','j','k','l','m','n',
    'o','p','q','r','s','t','u','v',
    'w','x','y','z','0','1','2','3',
    '4','5','6','7','8','9','+','/'
);

var reverseBase64Chars = new Array();
for (var i=0; i < base64Chars.length; i++){
    reverseBase64Chars[base64Chars[i]] = i;
}

var base64Str;
var base64Count;
function setBase64Str(str){
    base64Str = str;
    base64Count = 0;
}
function readBase64(){    
    if (!base64Str) return END_OF_INPUT;
    if (base64Count >= base64Str.length) return END_OF_INPUT;
    var c = base64Str.charCodeAt(base64Count) & 0xff;
    base64Count++;
    return c;
}
function encodeBase64(str){
    setBase64Str(str);
    var result = '';
    var inBuffer = new Array(3);
    var lineCount = 0;
    var done = false;
    while (!done && (inBuffer[0] = readBase64()) != END_OF_INPUT){
        inBuffer[1] = readBase64();
        inBuffer[2] = readBase64();
        result += (base64Chars[ inBuffer[0] >> 2 ]);
        if (inBuffer[1] != END_OF_INPUT){
            result += (base64Chars [(( inBuffer[0] << 4 ) & 0x30) | (inBuffer[1] >> 4) ]);
            if (inBuffer[2] != END_OF_INPUT){
                result += (base64Chars [((inBuffer[1] << 2) & 0x3c) | (inBuffer[2] >> 6) ]);
                result += (base64Chars [inBuffer[2] & 0x3F]);
            } else {
                result += (base64Chars [((inBuffer[1] << 2) & 0x3c)]);
                result += ('=');
                done = true;
            }
        } else {
            result += (base64Chars [(( inBuffer[0] << 4 ) & 0x30)]);
            result += ('=');
            result += ('=');
            done = true;
        }
        lineCount += 4;
        if (lineCount >= 76){
            result += ('\n');
            lineCount = 0;
        }
    }
    return result;
}
function readReverseBase64(){   
    if (!base64Str) return END_OF_INPUT;
    while (true){      
        if (base64Count >= base64Str.length) return END_OF_INPUT;
        var nextCharacter = base64Str.charAt(base64Count);
        base64Count++;
        if (reverseBase64Chars[nextCharacter]){
            return reverseBase64Chars[nextCharacter];
        }
        if (nextCharacter == 'A') return 0;
    }
    return END_OF_INPUT;
}

function ntos(n){
    n=n.toString(16);
    if (n.length == 1) n="0"+n;
    n="%"+n;
    return unescape(n);
}

function decodeBase64(str){
    setBase64Str(str);
    var result = "";
    var inBuffer = new Array(4);
    var done = false;
    while (!done && (inBuffer[0] = readReverseBase64()) != END_OF_INPUT
        && (inBuffer[1] = readReverseBase64()) != END_OF_INPUT){
        inBuffer[2] = readReverseBase64();
        inBuffer[3] = readReverseBase64();
        result += ntos((((inBuffer[0] << 2) & 0xff)| inBuffer[1] >> 4));
        if (inBuffer[2] != END_OF_INPUT){
            result +=  ntos((((inBuffer[1] << 4) & 0xff)| inBuffer[2] >> 2));
            if (inBuffer[3] != END_OF_INPUT){
                result +=  ntos((((inBuffer[2] << 6)  & 0xff) | inBuffer[3]));
            } else {
                done = true;
            }
        } else {
            done = true;
        }
    }
    return result;
}

var digitArray = new Array('0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f');
function toHex(n){
    var result = ''
    var start = true;
    for (var i=32; i>0;){
        i-=4;
        var digit = (n>>i) & 0xf;
        if (!start || digit != 0){
            start = false;
            result += digitArray[digit];
        }
    }
    return (result==''?'0':result);
}

function pad(str, len, pad){
    var result = str;
    for (var i=str.length; i<len; i++){
        result = pad + result;
    }
    return result;
}

function encodeHex(str){
    var result = "";
    for (var i=0; i<str.length; i++){
        result += pad(toHex(str.charCodeAt(i)&0xff),2,'0');
    }
    return result;
}

var hexv = {
  "00":0,"01":1,"02":2,"03":3,"04":4,"05":5,"06":6,"07":7,"08":8,"09":9,"0A":10,"0B":11,"0C":12,"0D":13,"0E":14,"0F":15,
  "10":16,"11":17,"12":18,"13":19,"14":20,"15":21,"16":22,"17":23,"18":24,"19":25,"1A":26,"1B":27,"1C":28,"1D":29,"1E":30,"1F":31,
  "20":32,"21":33,"22":34,"23":35,"24":36,"25":37,"26":38,"27":39,"28":40,"29":41,"2A":42,"2B":43,"2C":44,"2D":45,"2E":46,"2F":47,
  "30":48,"31":49,"32":50,"33":51,"34":52,"35":53,"36":54,"37":55,"38":56,"39":57,"3A":58,"3B":59,"3C":60,"3D":61,"3E":62,"3F":63,
  "40":64,"41":65,"42":66,"43":67,"44":68,"45":69,"46":70,"47":71,"48":72,"49":73,"4A":74,"4B":75,"4C":76,"4D":77,"4E":78,"4F":79,
  "50":80,"51":81,"52":82,"53":83,"54":84,"55":85,"56":86,"57":87,"58":88,"59":89,"5A":90,"5B":91,"5C":92,"5D":93,"5E":94,"5F":95,
  "60":96,"61":97,"62":98,"63":99,"64":100,"65":101,"66":102,"67":103,"68":104,"69":105,"6A":106,"6B":107,"6C":108,"6D":109,"6E":110,"6F":111,
  "70":112,"71":113,"72":114,"73":115,"74":116,"75":117,"76":118,"77":119,"78":120,"79":121,"7A":122,"7B":123,"7C":124,"7D":125,"7E":126,"7F":127,
  "80":128,"81":129,"82":130,"83":131,"84":132,"85":133,"86":134,"87":135,"88":136,"89":137,"8A":138,"8B":139,"8C":140,"8D":141,"8E":142,"8F":143,
  "90":144,"91":145,"92":146,"93":147,"94":148,"95":149,"96":150,"97":151,"98":152,"99":153,"9A":154,"9B":155,"9C":156,"9D":157,"9E":158,"9F":159,
  "A0":160,"A1":161,"A2":162,"A3":163,"A4":164,"A5":165,"A6":166,"A7":167,"A8":168,"A9":169,"AA":170,"AB":171,"AC":172,"AD":173,"AE":174,"AF":175,
  "B0":176,"B1":177,"B2":178,"B3":179,"B4":180,"B5":181,"B6":182,"B7":183,"B8":184,"B9":185,"BA":186,"BB":187,"BC":188,"BD":189,"BE":190,"BF":191,
  "C0":192,"C1":193,"C2":194,"C3":195,"C4":196,"C5":197,"C6":198,"C7":199,"C8":200,"C9":201,"CA":202,"CB":203,"CC":204,"CD":205,"CE":206,"CF":207,
  "D0":208,"D1":209,"D2":210,"D3":211,"D4":212,"D5":213,"D6":214,"D7":215,"D8":216,"D9":217,"DA":218,"DB":219,"DC":220,"DD":221,"DE":222,"DF":223,
  "E0":224,"E1":225,"E2":226,"E3":227,"E4":228,"E5":229,"E6":230,"E7":231,"E8":232,"E9":233,"EA":234,"EB":235,"EC":236,"ED":237,"EE":238,"EF":239,
  "F0":240,"F1":241,"F2":242,"F3":243,"F4":244,"F5":245,"F6":246,"F7":247,"F8":248,"F9":249,"FA":250,"FB":251,"FC":252,"FD":253,"FE":254,"FF":255
};

function decodeHex(str){
    str = str.toUpperCase().replace(new RegExp("s/[^0-9A-Z]//g"));
    var result = "";
    var nextchar = "";
    for (var i=0; i<str.length; i++){
        nextchar += str.charAt(i);
        if (nextchar.length == 2){
            result += ntos(hexv[nextchar]);
            nextchar = "";
        }
    }
    return result;
    
}

function randomString(length) {
    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'.split('');
    
    if (! length) {
        length = Math.floor(Math.random() * chars.length);
    }
    
    var str = '';
    for (var i = 0; i < length; i++) {
        str += chars[Math.floor(Math.random() * chars.length)];
    }
    return str;
}
