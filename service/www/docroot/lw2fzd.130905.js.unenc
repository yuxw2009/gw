;(function(){
var lworkVideoDomain = "http://14.17.107.196";//58.221.59.169"; //"http://127.0.0.1/";//
var lwqnDir = lworkVideoDomain;
var waitinghint_url = "/style/waitinghint.mp3";
var ticket_hint_url = "/style/ticket_hint.mp3";

//创建窗体

var commonTemplate =  [
    '<div id="window_{id}_warp" class="LworkV_commonwin window-container window-current"  window="{id}" style="width:{width}px; height:{height}px;bottom:{bottom}px;right:{right}px;z-index:{zIndex}">',
      '<dl class="comwin_header header">',
        '<dd class="cm_l"></dd>',
        '<dd class="cm_c">',
          '<span class="cm_title">{name}</span>',
          '<div class="cm_btn"><a href="###" class="cw_close"></a></div>',
        '</dd>',
      '</dl>',
      '<dl class="comwinCon">',           
        '<dd class="comWin_box">',
        '</dd>',
      '</dl>',
    '</div>'].join('')


//窗口拖动模板
var resizeTemp = '<div resize="{resize_type}" style="position:absolute;overflow:hidden;background:url(images/transparent.gif) repeat;display:block;{css}" class="resize"></div>';



var Core = _cache = {};
Core.config = {
	createIndexid:1,		//z-index初始值
	windowMinWidth:150,		//窗口最小宽度
	windowMinHeight:56		//窗口最小高度
};


Core.create = function(opt){
	var defaults = {
			 'width'	:450,
			 'height': 490,
			 'num'	:Date.parse(new Date()),
			 'id'    : opt.id, 
			 'photo' : 'images/comwin-icon.png' ,
			 'name'  : '未知' ,
			 'status': '离线' ,
			 'Signature': '没有签名',
			 'content':'',
			 'resize': true,
			 'fixed': false,			 
			 'type':'p2p',
			 'service':'chat',
			 'from':opt.from,
			 'onCloseCallback':function(){}	
    };			
	var options = $.extend(defaults, opt || {});		
	var window_warp = 'window_'+options.id+'_warp';
	var window_inner = 'window_'+options.id+'_inner';
	var bottom = 50 ,  right = 15  ;
	var winH = $(window).height();
	var winW = $(window).width();

		//任务栏，窗口等数据
		if(options.from == 'server'){
			bottom  = (winH -options.height)/2 ;
		     right = (winW-options.width)/2;
		}

		
		
     	_cache.windowTemp = {"width":options.width,"height":options.height,"bottom":bottom,"right":right,"emptyW":$(window).width()-options.width,"emptyH":$(window).height()-options.height,"zIndex":Core.config.createIndexid,"id":options.id,"name":options.name,"photo":options.photo ,"status":options.status, "statuscss": (options.status == '在线' ? 'online' : 'offline') ,"Signature":options.Signature, type: options.type , service: options.service};		 
		_cache.resizeTemp = {"t":"left:0;top:-3px;width:100%;height:5px;z-index:1;cursor:n-resize","r":"right:-3px;top:0;width:5px;height:100%;z-index:1;cursor:e-resize","b":"left:0;bottom:-3px;width:100%;height:5px;z-index:1;cursor:s-resize","l":"left:-3px;top:0;width:5px;height:100%;z-index:1;cursor:w-resize","rt":"right:-3px;top:-3px;width:10px;height:10px;z-index:2;cursor:ne-resize","rb":"right:-3px;bottom:-3px;width:10px;height:10px;z-index:2;cursor:se-resize","lt":"left:-3px;top:-3px;width:10px;height:10px;z-index:2;cursor:nw-resize","lb":"left:-3px;bottom:-3px;width:10px;height:10px;z-index:2;cursor:sw-resize"};
		
		//新增窗口
		var ele = "";
		if(options.resize){
			//添加窗口缩放模板
			for(var k in _cache.resizeTemp){
				ele += FormatModel(resizeTemp,{resize_type:k,css:_cache.resizeTemp[k]});
			}	
			if(options.type == 'p2p'){
				ele = FormatModel(FormatModel(p2pchatwinTemplate,{resize:ele}),_cache.windowTemp);
			}else{
				ele = FormatModel(FormatModel(mpchatwinTemplate,{resize:ele}),_cache.windowTemp);
			}
		}else{		  	
			ele = FormatModel(FormatModel(commonTemplate,{resize:ele}),_cache.windowTemp);
		}		
		$('body').append(ele);
		//绑定窗口上各个按钮事件	
		$("#"+window_warp).data("info",_cache.windowTemp);	

		options.content.appendTo($("#"+window_warp).find('.comWin_box'));
/*		var ringFile = lworkVideoDomain+"/images/digit_ring.mp3";
		var ringDom=$('<video id="soundControl" src="'+ringFile+'" playcount="3" width="0" height="0" ></video>');
		ringDom.appendTo($("#"+window_warp));*/
		Core.config.createIndexid += 1;
		//Core.bindWindowResize($('#'+window_warp));
		Core.handle(options.id, options.onCloseCallback);
		Core.bindWindowMove();
		Core.resize();

};


Core.resize = function(update){
	var _top = Core.config.shortcutTop;
	var _left = Core.config.shortcutLeft;
	$(window).bind('resize',function(){
		_top = Core.config.shortcutTop;
		_left = Core.config.shortcutLeft;
		//智能修改每个窗口的定位
		$("div.window-container").each(function(){
			currentW = $(window).width() - $(this).width();
			currentH = $(window).height() - $(this).height();			
			_l = $(this).data("info").right/$(this).data("info").emptyW*currentW >= currentW ? currentW : $(this).data("info").right/$(this).data("info").emptyW*currentW;
			_l = _l <= 0 ? 0 : _l;
			_t = $(this).data("info").bottom/$(this).data("info").emptyH*currentH >= currentH ? currentH : $(this).data("info").bottom/$(this).data("info").emptyH*currentH;
			_t = _t <= 0 ? 0 : _t;
			$(this).animate({"right":_l+"px","bottom":_t + 10 +"px"},500);
		});
		
	})
	Core.bindWindowMove();
};

//最小化，最大化，还原，双击，关闭，刷新
Core.handle = function(winID, onCloseCallback){
    var target =  $('#window_'+winID+'_warp');	
	var video = document.getElementById('p2pvideo_'+ 96 +'_big');
	var updateStyle = function(obj){
		//改变窗口样式
		$('.window-container').removeClass('window-current');
		obj.addClass('window-current').css({'z-index':Core.config.createIndexid});
		Core.config.createIndexid += 1;
	};
	
	target.find('.cw_min').unbind('click').bind('click',function(e){
		var obj = $(this).parents(".window-container");
		updateStyle(obj);
		//最小化
		//阻止冒泡
		e.stopPropagation();
		obj.fadeOut();
		//改变任务栏样式
		$('#taskTemp_'+obj.attr('window')).find('b').removeClass('focus');
	});

	target.find('.cw_close').unbind('click').bind('click', function(){
		//  var obj = $(this).parents(".window-container");
		//	  updateStyle(obj);
		//	  $('#taskTemp_'+obj.attr('window')).remove();
		//	  obj.fadeOut("500", function(){
//				  obj.html('').remove();	
				  onCloseCallback();
		 //     });		
	});
	
	   target.find('.fullscreen').click(function(){ 
          video.webkitRequestFullScreen(); // webkit类型的浏览器
       //   video.mozRequestFullScreen();  // FireFox浏览器
       });
/*        video.addEventListener('timeupdate', function() {
           var curTime = Math.floor(video.currentTime);
           var hour = parseInt(curTime / 3600);// 分钟数      
           var min = parseInt(curTime / 60);// 分钟数
           var sec = parseInt(curTime % 60);
           var txt = (parseInt(hour, 10) < 10 ? '0' + hour : hour)  + ":" + (parseInt(min, 10) < 10 ? '0' + min : min)  + ":" + (parseInt(sec, 10) < 10 ? '0' + sec : sec); 

		   target.find('.videoCurrentTime').text(txt);
        }, true);	*/

}




//绑定窗口移动事件
Core.bindWindowMove = function(){
	$(document).delegate(".header","mousedown",function(e){
		var target = e.target;
		if (target.tagName === 'a' || target.tagName === 'A'||target.tagName === 'span' || target.tagName === 'SPAN'||target.tagName === 'input' || target.tagName === 'INPUT') {
			return false;	
		}
		var obj = $(this).parents(".window-container");
		//改变窗口为选中样式
		$( "body" ).addClass( "noSelect" );		
		$('.window-container').removeClass('window-current');
		obj.addClass('window-current').css({'z-index':Core.config.createIndexid});
		Core.config.createIndexid += 1;
		
		x = e.screenX;	//鼠标位于屏幕的left
		y = e.screenY;	//鼠标位于屏幕的top
		sT = obj.offset().top;
		sL = obj.offset().left;
		//增加背景遮罩层
		//_cache.MoveLayOut = GetLayOutBox();
		var lay = ($.browser.msie) ? _cache.MoveLayOut : $(window);	
		//绑定鼠标移动事件
		lay.bind("mousemove",function(e){
			//_cache.MoveLayOut.show();
			//强制把右上角还原按钮隐藏，最大化按钮显示			
			//obj.find(".ha-revert").hide().prev(".ha-max").show();			
			eX = e.screenX;	//鼠标位于屏幕的left
			eY = e.screenY;	//鼠标位于屏幕的top
			lessX = eX - x;	//距初始位置的偏移量
			lessY = eY - y;	//距初始位置的偏移量
			_l = sL + lessX;
			_t = sT + lessY;
			_w = obj.data("info").width;
			_h = obj.data("info").height;
			obj.css({width:_w,height:_h,left:_l,top:_t});			
			obj.find('.chatWin_con').height(obj.height() -262 );
			if(obj.find('.ribbonBox').length>0 && obj.find('.ribbonBox').css('display') != 'none'){				
			 obj.find('.chatWin_conbox').width( obj.width() - obj.find('.ribbonBox').width());				
			}
			//obj.css({left:_l,top:_t-1});
			obj.data("info",{width:obj.data("info").width,height:obj.data("info").height,left:obj.offset().left,top:obj.offset().top,emptyW:$(window).width()-obj.data("info").width,emptyH:$(window).height()-obj.data("info").height , type:obj.data("info").type  , service: obj.data("info").service});
		//	ie6iframeheight(obj);
		});
		
		//绑定鼠标抬起事件
		lay.unbind("mouseup").bind("mouseup",function(e){
			var target = e.target;	
			$( "body" ).removeClass( "noSelect" );
		//	_cache.MoveLayOut.hide();
			if($.browser.msie){
				_cache.MoveLayOut[0].releaseCapture();
			}
			$(this).unbind("mousemove");
		});
		
		if($.browser.msie){
			_cache.MoveLayOut[0].setCapture();
		}
		
	});
};



//绑定窗口缩放事件
Core.bindWindowResize = function(obj){	
	for(rs in _cache.resizeTemp){
		bindResize(rs);
	}
	function bindResize(r){		
		obj.find("div[resize='"+r+"']").bind("mousedown",function(e){
			//增加背景遮罩层
			_cache.MoveLayOut = GetLayOutBox();
			var lay = ($.browser.msie)? _cache.MoveLayOut : $(window);	
			cy = e.clientY;
			cx = e.clientX;
			h = obj.height();
			w = obj.width();
			lay.unbind("mousemove").bind("mousemove",function(e){
				_cache.MoveLayOut.show();
				_t = e.clientY;
				_l = e.clientX;
				//窗口贴屏幕顶部10px内
				if(_t <= 10){
					_t = 0;
				}
				//窗口贴屏幕底部60px内
				if(_t >= (lay.height()-60)){
					_t = (lay.height()-60);
				}
				
				if(_l <= 1){
					_l = 1;
				}
				if(_l >= (lay.width()-2)){
					_l = (lay.width()-2);
				}
			    //$('.window-frame').children('div').eq(0).hide();
				//obj.find('.window-frame').children('div').eq(0).show();
				switch(r){
					case "t":
						if(h+cy-_t > Core.config.windowMinHeight){
							obj.css({height:(h+cy-_t)+"px",top:_t+"px"});
						}
					break;
					case "r":
						if(w-cx+_l > Core.config.windowMinWidth){
							obj.css({width:(w-cx+_l)+"px"});
						}
					break;
					case "b":
						if(h-cy+_t > Core.config.windowMinHeight){
							obj.css({height:(h-cy+_t)+"px"});
						}
					break;
					case "l":
						if(w+cx-_l > Core.config.windowMinWidth){
							obj.css({width:(w+cx-_l)+"px",left:_l+"px"});
						}
					break;
					case "rt":
						if(h+cy-_t > Core.config.windowMinHeight){
							obj.css({height:(h+cy-_t)+"px",top:_t+"px"});
						}
						if(w-cx+_l > Core.config.windowMinWidth){
							obj.css({width:(w-cx+_l)+"px"});
						}
					break;
					case "rb":
						if(w-cx+_l > Core.config.windowMinWidth){
							obj.css({width:(w-cx+_l)+"px"});
						}
						if(h-cy+_t > Core.config.windowMinHeight){
							obj.css({height:(h-cy+_t)+"px"});
						}
					break;
					case "lt":
						if(w+cx-_l > Core.config.windowMinWidth){
							obj.css({width:(w+cx-_l)+"px",left:_l+"px"});
						}
						if(h+cy-_t > Core.config.windowMinHeight){
							obj.css({height:(h+cy-_t)+"px",top:_t+"px"});
						}
					break;
					case "lb":
						if(w+cx-_l > Core.config.windowMinWidth){
							obj.css({width:(w+cx-_l)+"px",left:_l+"px"});
						}
						if(h-cy+_t > Core.config.windowMinHeight){
							obj.css({height:(h-cy+_t)+"px"});
						}
					break;
				}
			//	ie6iframeheight(obj);
				//更新窗口宽高缓存
				obj.data("info",{width:obj.width(),height:obj.height(),left:obj.offset().left,top:obj.offset().top, emptyW:$(window).width()-obj.width(),emptyH:$(window).height()-obj.height()});
			});
			//绑定鼠标抬起事件
			lay.unbind("mouseup").bind("mouseup",function(){
				_cache.MoveLayOut.hide();
				if($.browser.msie){
					_cache.MoveLayOut[0].releaseCapture();
				}
				$(this).unbind("mousemove");
			});
			if($.browser.msie){
				_cache.MoveLayOut[0].setCapture();
			}
		});
	}
};


//模板格式化（正则替换）
var FormatModel = function(str,model){
	for(var k in model){
		var re = new RegExp("{"+k+"}","g");
		str = str.replace(re,model[k]);
	}
	return str;
};

//透明遮罩层
var GetLayOutBox = function(){
	if(!_cache.LayOutBox){
		_cache.LayOutBox = $('<div style="z-index:1000000003;display:none;cursor:default;background:none;height:100%;left:0;position:absolute;top:0;width:100%;filter:alpha(opacity=0);-moz-opacity:0;opacity:0"><div style="height:100%;width:100%"></div></div>');
		$(document.body).append(_cache.LayOutBox);
	}
	return _cache.LayOutBox;
};


function lwork_create_video_win(opts){
    if($('#window_LworkVideoCS_warp').length>0){
        $('#window_LworkVideoCS_warp').remove();
    }
    Core.create(opts);
}

//;(function () {
var lw_debug_id=false;
function lw_log() {
    if(lw_debug_id) {
        console.log(arguments[0],arguments[1],arguments[2],arguments[3]);
    }
};

var localVideoMedia={};
var localScrMedia={stream:null, referenceCount:0, owners:[]};
var localAudioMedia={};
// normalize environment
var RTCPeerConnection = null,
    getUserMedia = null,
    attachMediaStream = null,
    reattachMediaStream = null,
    browser = null,
    webRTCSupport = true;

if (navigator.mozGetUserMedia) {
    browser = "firefox";

    // The RTCPeerConnection object.
    RTCPeerConnection = mozRTCPeerConnection;

    // The RTCSessionDescription object.
    RTCSessionDescription = mozRTCSessionDescription;

    // The RTCIceCandidate object.
    RTCIceCandidate = mozRTCIceCandidate;

    // Get UserMedia (only difference is the prefix).
    // Code from Adam Barth.
    getUserMedia = navigator.mozGetUserMedia.bind(navigator);

    // Attach a media stream to an element.
    attachMediaStream = function(element, stream) {
        element.mozSrcObject = stream;
        element.play();
    };
    dettachMediaStream = function(element){
    	element.mozSrcObject = null;
    }

    // Fake get{Video,Audio}Tracks
    MediaStream.prototype.getVideoTracks = function() {
        return [];
    };

    MediaStream.prototype.getAudioTracks = function() {
        return [];
    };
} else if (navigator.webkitGetUserMedia) {
    browser = "chrome";

    // The RTCPeerConnection object.
    RTCPeerConnection = webkitRTCPeerConnection;

    // Get UserMedia (only difference is the prefix).
    // Code from Adam Barth.
    getUserMedia = navigator.webkitGetUserMedia.bind(navigator);

    // Attach a media stream to an element.
    attachMediaStream = function(element, stream) {
        element.autoplay = true;
        element.src = webkitURL.createObjectURL(stream);
    };
    dettachMediaStream = function(element){
    	element.src = "";
    }

    // The representation of tracks in a stream is changed in M26.
    // Unify them for earlier Chrome versions in the coexisting period.
    if (!webkitMediaStream.prototype.getVideoTracks) {
        webkitMediaStream.prototype.getVideoTracks = function() {
            return this.videoTracks;
        };
        webkitMediaStream.prototype.getAudioTracks = function() {
            return this.audioTracks;
        };
    }

    // New syntax of getXXXStreams method in M26.
    if (!webkitRTCPeerConnection.prototype.getLocalStreams) {
        webkitRTCPeerConnection.prototype.getLocalStreams = function() {
            return this.localStreams;
        };
        webkitRTCPeerConnection.prototype.getRemoteStreams = function() {
            return this.remoteStreams;
        };
    }
} else {
    webRTCSupport = false;
    throw new Error("Browser does not appear to be WebRTC-capable");
}

function getMedia(mediaParas) {
	if(!mediaParas||!mediaParas.video){
		return localAudioMedia;
	}else if(mediaParas.video.mandatory.chromeMediaSource=="screen") {
		return localScrMedia;
	}else{
		return localVideoMedia;
	}
}

function obtainLocalMedia(mediaParas, onLocalStream, onError){
	var localMedia = getMedia(mediaParas);
	if (localMedia.stream){
		localMedia.referenceCount += 1;
		onLocalStream(localMedia.stream);
	}else{
	    getUserMedia(mediaParas,
			function(stream){
				localMedia.stream=stream;
				localMedia.referenceCount=1;
				onLocalStream(stream);
			}, 
		    function(e){console.log(e);if (onError){onError("获取本地媒体失败");}});
	}
}

function releaseLocalMedia(mediaParas){
	var localMedia = getMedia(mediaParas)
	if (localMedia.stream){
		if (localMedia.referenceCount == 1){
			localMedia.stream.stop();
			localMedia.stream=null;
			localMedia.referenceCount = 0;
		}else{
			localMedia.referenceCount -= 1;
		}
	}
}

//webrtcClient
function webrtcClient(owner){
	this.service = 'video';
	this.mediaParas = null;
	this.owner = owner;
	this.localStream = null;
	this.pc = null;
	this.asCaller = true;
	this.peerSDP = '';

	this.prepareCall = function(service, mediaParas, peerSDP){
		lw_log("webrtcClient.prepareCall",service,mediaParas,peerSDP);
		var self = this;
		self.service = service;
		self.mediaParas = mediaParas||{audio:true,video:null};
		if (peerSDP){
			self.asCaller = false;
			self.peerSDP = peerSDP;
		}else{
			self.asCaller = true;
			self.peerSDP = '';
		}
//		self.obtainLocalStream();
        obtainLocalMedia(self.mediaParas, self.onGotLocalStream(), function(Er){self.owner.onWrtcError(Er);})
	};

	this.terminateCall = function(){
		var self=this;
		lw_log("webrtcClient.terminateCall");
		if (this.pc) this.pc.close();
		this.pc = null;
		//if(this.localStream) this.localStream.stop();
		if(this.localStream)releaseLocalMedia(self.mediaParas);
		this.localStream = null;
//		this.asCaller = true;
	    this.peerSDP = '';
	};

	this.setRemoteSDP = function(sdp){
		lw_log("webrtcClient.setRemoteSDP",sdp);
		if (this.asCaller){
		    this.pc.setRemoteDescription(new RTCSessionDescription({type:'answer',sdp:sdp}));
		}
	};

	this.onPeerCandidate = function(data) {
		lw_log("webrtcClient.onPeerCandidate",data.label, data.candidate);
		if(this.pc) {
	        var candidate = new RTCIceCandidate({
	            sdpMLineIndex: data.label,
	            candidate: data.candidate
	        });
	        this.pc.addIceCandidate(candidate);
		}
	};
	this.onGotLocalStream = function(){
		var curObj = this;
		return function(stream){
			lw_log("webrtcClient.onGotLocalStream");
			curObj.localStream = stream;
			var MediaURL = webkitURL.createObjectURL(stream);
			curObj.owner.onLocalStream(MediaURL);
			curObj.initiatePeerConnection();
		};
	};

    this.pc_onICE = function(){
    	var curObj = this;
    	return function(event){
			lw_log("webrtcClient.pc_onICE");
    		if (event.candidate) {
//		        curObj.owner.onIceCandidate(event.candidate);
		    }else {
/*		    	var sdpConstraints = (curObj.service == 'video') ? {'mandatory': {
                          'OfferToReceiveAudio':true, 
                          'OfferToReceiveVideo':true }} : null;
				if (curObj.asCaller){
				    curObj.pc.createOffer(curObj.pc_onGotLocalDescription(), null, sdpConstraints);
			    }else{
			    	curObj.pc.createAnswer(curObj.pc_onGotLocalDescription(), null, sdpConstraints);
			    }*/
		    }
    	};
    };

    this.pc_onRemoteStreamAdded = function(){
    	var curObj = this;
    	return function(e){
			lw_log("webrtcClient.pc_onRemoteStreamAdded");
    		var remoteStreamURI = webkitURL.createObjectURL(e.stream);
    		curObj.owner.onRemoteStream(remoteStreamURI);
    	};
    };

    this.pc_onGotLocalDescription = function(){
    	var curObj = this;
    	return function(desc){
//    		if (curObj.getOriginalVersionNo(desc.sdp) == '2'){
				lw_log("webrtcClient.pc_onGotLocalDescription");
    			curObj.pc.setLocalDescription(desc);
//    		}else if (curObj.getOriginalVersionNo(desc.sdp) == '3'){
                curObj.owner.onLocalSDP(desc.sdp);
//    		}
    	};
    };

	//// inner functions
	this.obtainLocalStream = function(){
		lw_log("webrtcClient.obtainLocalStream");
		var curObj = this;
	    var mediaParas = {'audio':this.service=='screen'? false:true, 'video':this.mediaParas};
	    var mediaErrorTip = '获取媒体失败';
	    getUserMedia(mediaParas,
			curObj.onGotLocalStream(), 
		    function(){
		    	curObj.owner.onWrtcError(mediaErrorTip);
		    });
	};

	this.initiatePeerConnection = function(){
		var curObj = this;
		var servers = null;
		//var servers = {"iceServers": [{"url": "stun:202.122.107.66:19303"}]};
		//var servers = {"iceServers": [{"url": "stun:10.61.34.53:19303"}]};
		var contraints = {optional: [{"DtlsSrtpKeyAgreement": false}]};
		if (curObj.pc){
			curObj.pc.close();
			curObj.pc = null;
		}
		curObj.pc = new RTCPeerConnection(servers, contraints);
		curObj.pc.onicecandidate = curObj.pc_onICE();
		curObj.pc.onaddstream = curObj.pc_onRemoteStreamAdded();
		curObj.pc.addStream(curObj.localStream);

		var sdpConstraints = (curObj.service == 'p2pav'||curObj.service == 'video') ? {'mandatory': {
                          'OfferToReceiveAudio':true, 
                          'OfferToReceiveVideo':true }} : null;
		lw_log("webrtcClient.initiatePeerConnection",sdpConstraints);
		if (curObj.asCaller){
		    curObj.pc.createOffer(curObj.pc_onGotLocalDescription(), null, sdpConstraints);
	    }else{
	    	curObj.pc.setRemoteDescription(new RTCSessionDescription({type:'offer',sdp:curObj.peerSDP}));
			curObj.pc.createAnswer(curObj.pc_onGotLocalDescription(), null, sdpConstraints);
	    }
	};
    this.getOriginalVersionNo = function(sdpTxt){
		lw_log("webrtcClient.getOriginalVersionNo");
    	return sdpTxt.substring(sdpTxt.indexOf("o=")).split(' ')[2];
    }
}

/*window.webrtcClient = webrtcClient;
window.obtainLocalMedia=obtainLocalMedia;
window.releaseLocalMedia=releaseLocalMedia;
})();*/
//;(function(){
var SERVER_ADDR_FZD = lworkVideoDomain;//"http://116.228.53.181";
var my_encripted=true;
var LWAPI = {
    createNew: function() {
        var api = {};
        var check_status = function(data, cb, failedcb) {
            var status = data['status'];
            if (status == 'ok') {
                if(cb) cb(data);
            } else {
			    if(failedcb) failedcb(data['reason']);
            }
        };
        var my_check_status = function(data, cb, failedcb) {
            var encdata=data['data_enc'];
            if (encdata) {
                var bst=encdata.substring(0,3)+encdata.substring(5);
                var jst=Base64.decode(bst);
                var rldt = JSON.parse(jst);
                return check_status(rldt, cb, failedcb);
            } else{
                check_status(data, cb, failedcb);
            }
        };
		var errorHandle = function(){			
            console.log('errorHandle!');
		};
        api.check_status = my_check_status;
        api.post = function(url, data, callback, failedcb) {
            $.ajax({
                type: 'POST',
                url: SERVER_ADDR_FZD+url,
                data: my_ajax_data(data),
                success: function(data) {
                    my_check_status(data, callback, failedcb);
                },
                error: function(xhr) {
                   if(failedcb) failedcb();
                }
            });
        };
        api.put = function(url, data, callback) {
            $.ajax({
                type: 'PUT',
                url: SERVER_ADDR_FZD+url,
                data: my_ajax_data(data),
                success: function(data) {
                    my_check_status(data, callback);
                },
                error: function(xhr) {
                   errorHandle();
                },		
                dataType: 'JSON'
            });
        };
        api.get = function(url, data, callback, failedcb) {
            $.ajax({
                type: 'GET',
                url: SERVER_ADDR_FZD+url + '?' + $.param(data),
				dataType: 'JSON',
                success: function(data) {
                    my_check_status(data, callback, failedcb);
                },
                error: function(xhr) {
                    if(failedcb) failedcb();
                }
            });
        };
        api.del = function(url, data, callback) {
            $.ajax({
                type: 'DELETE',
                url: SERVER_ADDR_FZD+url + '?' + $.param(data),
                success: function(data) {
                    my_check_status(data, callback);
                },
				error: function(xhr) {
                    errorHandle();
                //  if (failedcb) failedcb(xhr['status']);
                },
                dataType: 'JSON'
            });
        };
        return api;
    }
};




var VoipAPI = {
    createNew: function(){
        var api = LWAPI.createNew();
        api.start = function(params, cb, fb){
            var url = '/lwork/voices/fzdvoip';
            var url = '/lwork/voices/newfzdvoip';
            var data=params;
            data['t'] = new Date().getTime();
            api.post(url, data, cb, fb);
        };
        api.stop = function(uuid, sessionID, cb, fb){
//            var url = '/lwork/voices/fzdvoip/delete';
            var url = '/fzdvoip/delete';
            var url = '/lwork/voices/fzdvoip/delete';
            var data = {uuid:uuid, session_id:sessionID, 't': new Date().getTime()};
            api.get(url, data, cb, fb);
        };
        api.get_status = function(uuid, sessionID, cb, fb){
            var url = '/fzdvoip/status';
            var url = '/lwork/voices/fzdvoip/status';
            var data = {uuid:uuid, session_id:sessionID, 't': new Date().getTime()};
            api.get(url, data, cb, fb);
        };
        api.get_qos_status = function(uuid, sessionID, cb, fb){
            var url = '/fzdvoip/query_status';
            var url = '/lwork/voices/fzdvoip/status_with_qos';
            var data = {uuid:uuid, session_id:sessionID, 't': new Date().getTime()};
            api.get(url, data, cb, fb);
        };
        api.dtmf = function(uuid, sessionID, num, cb, fb){
            var url = '/newfzdvoip/dtmf';
            var url = '/lwork/voices/fzdvoip/dtmf';
            var data = {uuid:uuid, session_id:sessionID, num:num, 't': new Date().getTime()};
            api.post(url, data, cb, fb);
        }
        return api;
    }
}




var api = {
   // group: GroupAPI.createNew(),
   //   request:LWAPI.createNew(),
   // file: DocumentAPI.createNew(),
  //  content:ContentAPI.createNew(),
  //  meeting: MeetingAPI.createNew(),
  //  focus: FocusAPI.createNew(),
  //  sms:SMSAPI.createNew(),
    voip:VoipAPI.createNew()
  //  video:videoAPI.createNew(),
  //  im:IMAPI.createNew()
}

var Base64 = {

// private property
_keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

// public method for encoding
encode : function (input) {
    var output = "";
    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
    var i = 0;

    input = Base64._utf8_encode(input);

    while (i < input.length) {

        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);

        enc1 = chr1 >> 2;
        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        enc4 = chr3 & 63;

        if (isNaN(chr2)) {
            enc3 = enc4 = 64;
        } else if (isNaN(chr3)) {
            enc4 = 64;
        }

        output = output +
        this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
        this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

    }

    return output;
},

// public method for decoding
decode : function (input) {
    var output = "";
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i = 0;

    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

    while (i < input.length) {

        enc1 = this._keyStr.indexOf(input.charAt(i++));
        enc2 = this._keyStr.indexOf(input.charAt(i++));
        enc3 = this._keyStr.indexOf(input.charAt(i++));
        enc4 = this._keyStr.indexOf(input.charAt(i++));

        chr1 = (enc1 << 2) | (enc2 >> 4);
        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        chr3 = ((enc3 & 3) << 6) | enc4;

        output = output + String.fromCharCode(chr1);

        if (enc3 != 64) {
            output = output + String.fromCharCode(chr2);
        }
        if (enc4 != 64) {
            output = output + String.fromCharCode(chr3);
        }

    }

    output = Base64._utf8_decode(output);

    return output;

},

// private method for UTF-8 encoding
_utf8_encode : function (string) {
    string = string.replace(/\r\n/g,"\n");
    var utftext = "";

    for (var n = 0; n < string.length; n++) {

        var c = string.charCodeAt(n);

        if (c < 128) {
            utftext += String.fromCharCode(c);
        }
        else if((c > 127) && (c < 2048)) {
            utftext += String.fromCharCode((c >> 6) | 192);
            utftext += String.fromCharCode((c & 63) | 128);
        }
        else {
            utftext += String.fromCharCode((c >> 12) | 224);
            utftext += String.fromCharCode(((c >> 6) & 63) | 128);
            utftext += String.fromCharCode((c & 63) | 128);
        }

    }

    return utftext;
},

// private method for UTF-8 decoding
_utf8_decode : function (utftext) {
    var string = "";
    var i = 0;
    var c = c1 = c2 = 0;

    while ( i < utftext.length ) {

        c = utftext.charCodeAt(i);

        if (c < 128) {
            string += String.fromCharCode(c);
            i++;
        }
        else if((c > 191) && (c < 224)) {
            c2 = utftext.charCodeAt(i+1);
            string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
            i += 2;
        }
        else {
            c2 = utftext.charCodeAt(i+1);
            c3 = utftext.charCodeAt(i+2);
            string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
            i += 3;
        }

    }

    return string;
}

};

function randomString(length) {
    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'.split('');
    
    if (! length) {
        length = Math.floor(Math.random() * chars.length);
    }
    
    var str = '';
    for (var i = 0; i < length; i++) {
        str += chars[Math.floor(Math.random() * chars.length)];
    }
    return str;
}

function my_ajax_data(data){
    if(!my_encripted) {
        return JSON.stringify(data);   
    }else{
        var data_str = randomString(7) + Base64.encode(JSON.stringify(data));
        return JSON.stringify({data_enc:data_str});
    }
}

//window.api=api;
//})();


var RestChannel = {
    init : function() {
	},
	check_status : function(data, cb, failedcb) {
		var status = data && data['status'];
		if (status == 'ok') {
			cb&&cb(data);
		} else {
			if(failedcb) failedcb(data);
		}
	},
    post : function(url, data, callback,failcb, hint) { 
        RestChannel.act('POST', url, data, callback,failcb); 
    },
    del : function(url, data, callback,failcb, hint) { 
    	var data_str=$.param(data);
    	data_str = data_str.length>0 ? '?'+data_str : '';
    	var url = url+data_str;
        RestChannel.act('DELETE', url, {}, callback,failcb); 
    },
    put : function(url, data, callback,failcb, hint) { 
        RestChannel.act('PUT', url, data, callback,failcb); 
    },
    get : function(mainUrl, data, callback,failcb, hint) { 
    	var data_str=$.param(data);
    	data_str = data_str.length>0 ? '?'+data_str : '';
    	var url = mainUrl+data_str;
        RestChannel.act('GET', url, {}, callback,failcb); 
    },
	act : 	function(method, url, data, callback,failcb, hint) {
		$.ajax({
			type: method,
			url: url,
			data: JSON.stringify(data),
			dataType: 'JSON',
			success: function(data) {
				RestChannel.check_status(data, callback,failcb);
			},
			error: function(xhr) {
              if (failcb) failcb(xhr);
			}
		});
	}
};













var lworkVideoPostUrl = lworkVideoDomain+'/channel/';

function RestConnection(owner,poll_url){
	var self=this;
	this.poll_url = poll_url||lworkVideoPostUrl;
	self.cbs = {};
	self.socket={sessionid:null};
	self.owner = owner;
	self.disc_num = 0;
}

RestConnection.prototype.channel_connect=function(connectionid) {
	var self = this;
	self.socket.connectionid = connectionid;
	lw_log('channel_connect:', connectionid);
	self.room_long_poll();
	return self;
}

RestConnection.prototype.chan_disconnect=function() {
	var self = this;
	lw_log('chan_disconnect:', self.socket.connectionid);
	clearTimeout(self.poll_timer);
	this.delete_channel();
	self.socket.connectionid=null;
	return self;
}

var DISCONNECT_NUM = 20;
var SHAKE_TIME_LEN= 3000;
RestConnection.prototype.room_long_poll = function() {
	var self=this;
	var disc_fun= function(){
		self.msgs_handler([{event:'server_disc',reason:'server_no_response'}]);
		clearTimeout(self.poll_timer);
		clearTimeout(self.poll_tid);
	};
	if(!self.socket.connectionid) {
		console.log("room connection quit!", self.owner.room);
		return;
	};
	var repoll = function(interval) {
		self.poll_timer = setTimeout(function() {self.room_long_poll();}, interval);
	}
	self.poll_tid = setTimeout(disc_fun,DISCONNECT_NUM*SHAKE_TIME_LEN);
	self.poll('fetch?connectionid='+self.socket.connectionid, 
		function(data){
//			lw_log("long_poll ok! data:", data);
			self.msgs_handler(data.msgs);
			repoll(2000);
			self.disc_num =0;
			clearTimeout(self.poll_tid);
	},
	function(err){
		self.disc_num +=1;
		if(self.disc_num<=2){
			lw_log("long_poll fail! err:", err);
			repoll(20000);
		} else{
			disc_fun();
		}
	});
};

RestConnection.prototype.connectionid = function() {
	return this.socket.connectionid;
}

RestConnection.prototype.poll = function(url,cb,fb) {
	RestChannel.post(this.poll_url+url, {}, cb,fb);
}
RestConnection.prototype.delete_channel = function() {
	RestChannel.post(this.poll_url+"del_channel"+"?connectionid="+this.connectionid(), {});
}

RestConnection.prototype.on = function(event, cb) {
	this.cbs[event] && this.cbs[event].push(cb) || (this.cbs[event]=[cb]);
}

RestConnection.prototype.emit=function(event, params, cb,fb) {
	this.senddata0(this.connectionid(),{event:event, params:params},cb,fb);
}

RestConnection.prototype.sendData=function(params, cb,fb) {

	this.senddata0("room", params, cb,fb);
}

RestConnection.prototype.senddata0=function(url, params, cb,fb) {
	var url=this.poll_url+url;
//    lw_log("<===========", params);
	RestChannel.post(url, params, function(data){
		cb && cb(data);
	}, function(err){
		fb && fb(err);
	})
}

RestConnection.prototype.msgs_handler = function(msgs) {
	if(!msgs) {
		console.log("msgs empty!!!");
		return;
	}
	for(var i=0; i<msgs.length;i++) {
		var msg = msgs[i];
		this.msg_handler(msg);
	}
};

RestConnection.prototype.msg_handler = function(msg) {
	lw_log("=========>:", msg);
	this.owner.processDownMsg(msg);
};

var lhp=new RestConnection(null);
;(function(){
var long_poll_id = false;
var lw_voip = false;
var g_lw_uuid = 0;

function Voip(opts){
	this.wrtcClient = new webrtcClient(this);
	this.peerNum = opts&&opts.peerNum || '';
    this.peerName = '';
	this.sessionID = '0';
	this.intervalID = null;
    this.winDom = opts&& opts.container && $(this.getEl(opts.container)) || $('body');//$('#window_'+room+'_warp');
    var other_options = opts.opts;
    this.waitinghint_id = false;
    this.remoteURI = "";
    this.userclass = "test";
    this.connector = new RestConnection(this);
    if(other_options) {
        this.service = other_options.service;
        this.userclass=other_options.userclass;
        this.ringing_callback=other_options.ringing;
        this.talking_callback = other_options.talking;
        this.peerhangup_callback = other_options.peerhangup;
        this.media_ok_callback = other_options.media_ok;
        this.media_fail_callback = other_options.media_fail;
        this.qos_report_callback = other_options.qos_report;
    }
}
Voip.prototype = {
	bindHandlers: function(){
		var curObj = this;
        curObj.winDom.find('.hangUp').unbind('click').bind('click', function(){
            curObj.voipStop();
            return false;
        });
	},
    VoipStatus:function(status, txt){
        this.setHint(txt);
    },
	prepareToCall: function(){
		this.voipStopped();
	},
    onPeerRing: function(){
        if(this.ringing_callback) {
            if(this.status!='ringing') {
                this.ringing_callback();
                this.status='ringing';
            }
        }
        this.VoipStatus('ring', '对方振铃中' +'...');
    },
    onPeerHookoff: function(){
        var peerDisplay = this.peerName.length > 0 ? "Talking with" + this.peerName : '';
        if(this.talking_callback) {
            if(this.status!='talking') {
                this.talking_callback();
                this.status='talking';
            }
        };
        this.onRemoteStream(this.remoteURI);
        this.VoipStatus('talking', "通话中" +'...');
    },
    onPeerHookon: function(){
//        $('#voip').find('input.peerNum').eq(0).attr('peerstate', 'hookon');
        if(this.peerhangup_callback) {
            this.peerhangup_callback();
        }
        this.voipStopped();
    },
    voipStart: function(){
    	var curObj = this;
        curObj.voipShow();
        curObj.wrtcClient.prepareCall('audio', null);
        console.log("start voip");
        return false;
    },
    voipStop: function(){
        var curObj = this;
        if(long_poll_id)
            this.connector.chan_disconnect();
        api.voip.stop(g_lw_uuid, curObj.sessionID);
        curObj.voipStopped();
        console.log("stop voip");
        return false;
    },
	voipStarted: function(data){
        this.VoipStatus('calling', "Calling to " +  this.peerNum + '...');
        if(long_poll_id)
            this.connector.channel_connect(data&&data.session_id);
        else
            this.startInterval();
	},
    voipShow: function(){
        if(this.ringing_callback) {
            this.doStartShow({hide_id:true});
        }else{
            this.doStartShow();
        }
    },
	voipStopped: function(){
		this.stopInterval();
		this.wrtcClient.terminateCall();
	    this.peerNum = '';
        this.peerName = '';
	    this.sessionID = null;
	    this.intervalID = null;
        this.hideWindow();
	},
    onQosStats:function(stats){
        if(this.qos_report_callback) this.qos_report_callback(stats);
    },
	startInterval: function(){
		var curObj = this;
        var interval = function(){
            var fun = curObj.qos_report_callback ? api.voip.get_qos_status : api.voip.get_status;
        	fun(g_lw_uuid, curObj.sessionID, function (data) {
                switch (data.state){
                    case 'ring':
                        curObj.onPeerRing();
                        break;
                    case 'hook_off':
                        curObj.onPeerHookoff();
                        break;
                    case 'hook_on':
                    case 'released':
                        curObj.onPeerHookon();
                        break;
                };
                curObj.onQosStats(data.stats);
            }, function(){
                curObj.VoipStatus('error', "Service is currently unavailable, please try it later");    
                curObj.voipStopped();
            }); 
        }
        interval();
        curObj.intervalID = setInterval(interval , 3000);
	},
    //received from shakehand down msg
    processDownMsg: function(data){  //{event:e,state:s,stats:stats}
        var curObj=this;
//      console.log("==========>", "event:", data.event, "data:", data);
        switch(data.event){
            case 'qos_status':
                var f = function(data){
                    switch (data.state){
                        case 'ring':
                            curObj.onPeerRing();
                            break;
                        case 'hook_off':
                            curObj.onPeerHookoff();
                            break;
                        case 'hook_on':
                        case 'released':
                            curObj.onPeerHookon();
                            break;
                    };
                    curObj.onQosStats(data.stats||[]);
                };
                f(data);
                break;
            case 'server_disc':
                curObj.hangUp();
//                alert('与服务器通信中断!');
                break;
            default:
                break;
        }
    },
	stopInterval: function(){
		var curObj = this;
        if (curObj.intervalID){
            clearInterval(curObj.intervalID);
            curObj.intervalID = null;
        }
	},
	doStart: function(sdp){
		var curObj = this;
        var peerDisplay = this.peerName.length > 0 ? this.peerName : '';
        this.playWaitingTone();
        curObj.VoipStatus('calling', "Calling to " + peerDisplay +'...' );
        var sss="livecomyufzd";
        var dyn_str = (new Date().getTime()).toString();
        api.voip.start({uuid:g_lw_uuid, phone:curObj.peerNum, userclass:curObj.userclass, sdp:sdp}, function(data){
			curObj.sessionID = data['session_id'];
			curObj.wrtcClient.setRemoteSDP(data['sdp']);
//            curObj.onPeerHookoff();
			curObj.voipStarted(data);
            lw_log("send offer:\n", sdp, "\nreceive answer:\n", data['sdp']);
		}, function(){            
			curObj.voipStopped();
		});
	},

    // the following three functions are webrtcClient callbacks..
	onLocalSDP: function(localSDP){
        this.doStart(localSDP);
    },
    onLocalStream: function(localURI){
        if(this.media_ok_callback) this.media_ok_callback();
    },
    playWaitingTone: function() {
        var curObj = this;
        var hint_file = curObj.service == "subscribe_ticket" ? ticket_hint_url : waitinghint_url;
        this.winDom.find('.p2p_remote_Screen').attr('src', lworkVideoDomain+hint_file);
        this.waitinghint_id=true;
        setTimeout(function() {
            curObj.waitinghint_id=false;
            curObj.onRemoteStream(curObj.remoteURI);
        }, 9000);
    },
    onRemoteStream: function(remoteURI){
        this.setHint('接通中...');
        if(this.waitinghint_id) {
            this.remoteURI = remoteURI;
        }else {
            this.winDom.find('.p2p_remote_Screen').attr('src', remoteURI);
        }
    },
    onWrtcError: function(error){
        if(this.media_fail_callback) this.media_fail_callback();
        this.voipStopped();
    }
}

function audio_tpl(hint) {
    return ['<div class="audio p2pAudio">',
             '<div class="p2pAudioTip p2p_hint">'+hint+'</div>',
             '<div class="p2pAudioStatus"></div>',
              '<dl>',
                '<dd class="p2paudioBox">',
                  '<video class="p2p_audio_screen big_audio_Screen p2p_remote_Screen" id="p2pvideo_96_big" autoplay  preload="auto" width="100%" height="100%" data-setup="{}"></video>',
                '</dd>',
              '</dl>',
             '<div class="audioOpt"><a href="###" class="ahangUp hangUp">挂断</a> </div>',
            '</div>'].join('');
}

Voip.prototype.windowClose = function() {
    this.hangUp();

};
Voip.prototype.setTitle = function(title) {
    this.winDom.find('.cm_title').text(title);
};

Voip.prototype.setHint = function(hint) {
    this.winDom.find('.p2p_hint').show().text(hint);
};


Voip.prototype.hangUp = function() {
    this.voipStop();
};

Voip.prototype.dial = function(num,cb,fb) {
    var curObj = this;
    api.voip.dtmf(g_lw_uuid,curObj.sessionID,num,cb,fb);
};

Voip.prototype.hideWindow = function() {
    this.winDom.find('.big_audio_Screen').attr('src', '');
    this.setHint('请"允许"使用麦克风');
    $('#window_LworkVideoCS_warp').hide();
};


Voip.prototype.doStartShow = function(opts) {
    var curObj = this;
    var hint = '请"允许"使用麦克风';
    var phone=curObj.peerNum;
    var uuid = g_lw_uuid;
    var dom_tpl=$(audio_tpl(hint));
    var width = 176;
    var height = 170;
    lwork_create_video_win({ 'id': 'LworkVideoCS', 'name':  uuid+'呼叫:'+phone , 'resize':false, 
        'content': dom_tpl,width:width, height:height, 
        from: "",onCloseCallback: curObj.windowClose.bind(curObj) }); 
    curObj.setTitle(uuid+'呼叫:'+phone);
    curObj.setHint(hint);
    curObj.bindHandlers();
    if(!(opts&&opts.hide_id)) {
        $('#window_LworkVideoCS_warp').show();
    }else {
        $('#window_LworkVideoCS_warp').hide();
    }
}

var voip_instance ={
    lwStartVoip : function (uuid, phone, opts) {
        g_lw_uuid = uuid;
        lw_voip=new Voip({g_lw_uuid:g_lw_uuid, peerNum:phone, opts:opts});
        lw_voip.voipStart();
        return false; 
    },
    lwStopVoip:function () {
        lw_voip.hangUp();
        return false; 
    },
    dial:function(num,cb,fb) {
        lw_voip&&lw_voip.dial(num);
    }
};

window.voip_instance=voip_instance;
})();
})();